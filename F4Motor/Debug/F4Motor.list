
F4Motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dcc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006f54  08006f54  00016f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f74  08006f74  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f7c  08006f7c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f7c  08006f7c  00016f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f80  08006f80  00016f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08006f84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020034  2**0
                  CONTENTS
 10 .bss          000004bc  20000038  20000038  00020038  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200004f4  200004f4  00020038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000da89  00000000  00000000  000200a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001c81  00000000  00000000  0002db30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c78  00000000  00000000  0002f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000009d1  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e2c  00000000  00000000  00030e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000e760  00000000  00000000  00051c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb42e  00000000  00000000  0006038d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000036e4  00000000  00000000  0012b7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000047  00000000  00000000  0012eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006f3c 	.word	0x08006f3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	08006f3c 	.word	0x08006f3c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b970 	b.w	8000dfc <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9e08      	ldr	r6, [sp, #32]
 8000b3a:	460d      	mov	r5, r1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	460f      	mov	r7, r1
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d14a      	bne.n	8000bda <__udivmoddi4+0xa6>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4694      	mov	ip, r2
 8000b48:	d965      	bls.n	8000c16 <__udivmoddi4+0xe2>
 8000b4a:	fab2 f382 	clz	r3, r2
 8000b4e:	b143      	cbz	r3, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b54:	f1c3 0220 	rsb	r2, r3, #32
 8000b58:	409f      	lsls	r7, r3
 8000b5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000b5e:	4317      	orrs	r7, r2
 8000b60:	409c      	lsls	r4, r3
 8000b62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b66:	fa1f f58c 	uxth.w	r5, ip
 8000b6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b6e:	0c22      	lsrs	r2, r4, #16
 8000b70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b78:	fb01 f005 	mul.w	r0, r1, r5
 8000b7c:	4290      	cmp	r0, r2
 8000b7e:	d90a      	bls.n	8000b96 <__udivmoddi4+0x62>
 8000b80:	eb1c 0202 	adds.w	r2, ip, r2
 8000b84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b88:	f080 811c 	bcs.w	8000dc4 <__udivmoddi4+0x290>
 8000b8c:	4290      	cmp	r0, r2
 8000b8e:	f240 8119 	bls.w	8000dc4 <__udivmoddi4+0x290>
 8000b92:	3902      	subs	r1, #2
 8000b94:	4462      	add	r2, ip
 8000b96:	1a12      	subs	r2, r2, r0
 8000b98:	b2a4      	uxth	r4, r4
 8000b9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ba2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ba6:	fb00 f505 	mul.w	r5, r0, r5
 8000baa:	42a5      	cmp	r5, r4
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x90>
 8000bae:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bb6:	f080 8107 	bcs.w	8000dc8 <__udivmoddi4+0x294>
 8000bba:	42a5      	cmp	r5, r4
 8000bbc:	f240 8104 	bls.w	8000dc8 <__udivmoddi4+0x294>
 8000bc0:	4464      	add	r4, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc8:	1b64      	subs	r4, r4, r5
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11e      	cbz	r6, 8000bd6 <__udivmoddi4+0xa2>
 8000bce:	40dc      	lsrs	r4, r3
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0xbc>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	f000 80ed 	beq.w	8000dbe <__udivmoddi4+0x28a>
 8000be4:	2100      	movs	r1, #0
 8000be6:	e9c6 0500 	strd	r0, r5, [r6]
 8000bea:	4608      	mov	r0, r1
 8000bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf0:	fab3 f183 	clz	r1, r3
 8000bf4:	2900      	cmp	r1, #0
 8000bf6:	d149      	bne.n	8000c8c <__udivmoddi4+0x158>
 8000bf8:	42ab      	cmp	r3, r5
 8000bfa:	d302      	bcc.n	8000c02 <__udivmoddi4+0xce>
 8000bfc:	4282      	cmp	r2, r0
 8000bfe:	f200 80f8 	bhi.w	8000df2 <__udivmoddi4+0x2be>
 8000c02:	1a84      	subs	r4, r0, r2
 8000c04:	eb65 0203 	sbc.w	r2, r5, r3
 8000c08:	2001      	movs	r0, #1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	2e00      	cmp	r6, #0
 8000c0e:	d0e2      	beq.n	8000bd6 <__udivmoddi4+0xa2>
 8000c10:	e9c6 4700 	strd	r4, r7, [r6]
 8000c14:	e7df      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000c16:	b902      	cbnz	r2, 8000c1a <__udivmoddi4+0xe6>
 8000c18:	deff      	udf	#255	; 0xff
 8000c1a:	fab2 f382 	clz	r3, r2
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f040 8090 	bne.w	8000d44 <__udivmoddi4+0x210>
 8000c24:	1a8a      	subs	r2, r1, r2
 8000c26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	2101      	movs	r1, #1
 8000c30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c34:	fb07 2015 	mls	r0, r7, r5, r2
 8000c38:	0c22      	lsrs	r2, r4, #16
 8000c3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c3e:	fb0e f005 	mul.w	r0, lr, r5
 8000c42:	4290      	cmp	r0, r2
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0x124>
 8000c46:	eb1c 0202 	adds.w	r2, ip, r2
 8000c4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x122>
 8000c50:	4290      	cmp	r0, r2
 8000c52:	f200 80cb 	bhi.w	8000dec <__udivmoddi4+0x2b8>
 8000c56:	4645      	mov	r5, r8
 8000c58:	1a12      	subs	r2, r2, r0
 8000c5a:	b2a4      	uxth	r4, r4
 8000c5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c60:	fb07 2210 	mls	r2, r7, r0, r2
 8000c64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c68:	fb0e fe00 	mul.w	lr, lr, r0
 8000c6c:	45a6      	cmp	lr, r4
 8000c6e:	d908      	bls.n	8000c82 <__udivmoddi4+0x14e>
 8000c70:	eb1c 0404 	adds.w	r4, ip, r4
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	d202      	bcs.n	8000c80 <__udivmoddi4+0x14c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f200 80bb 	bhi.w	8000df6 <__udivmoddi4+0x2c2>
 8000c80:	4610      	mov	r0, r2
 8000c82:	eba4 040e 	sub.w	r4, r4, lr
 8000c86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c8a:	e79f      	b.n	8000bcc <__udivmoddi4+0x98>
 8000c8c:	f1c1 0720 	rsb	r7, r1, #32
 8000c90:	408b      	lsls	r3, r1
 8000c92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ca2:	40fd      	lsrs	r5, r7
 8000ca4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca8:	4323      	orrs	r3, r4
 8000caa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000cae:	fa1f fe8c 	uxth.w	lr, ip
 8000cb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000cb6:	0c1c      	lsrs	r4, r3, #16
 8000cb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cbc:	fb08 f50e 	mul.w	r5, r8, lr
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	fa02 f201 	lsl.w	r2, r2, r1
 8000cc6:	fa00 f001 	lsl.w	r0, r0, r1
 8000cca:	d90b      	bls.n	8000ce4 <__udivmoddi4+0x1b0>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cd4:	f080 8088 	bcs.w	8000de8 <__udivmoddi4+0x2b4>
 8000cd8:	42a5      	cmp	r5, r4
 8000cda:	f240 8085 	bls.w	8000de8 <__udivmoddi4+0x2b4>
 8000cde:	f1a8 0802 	sub.w	r8, r8, #2
 8000ce2:	4464      	add	r4, ip
 8000ce4:	1b64      	subs	r4, r4, r5
 8000ce6:	b29d      	uxth	r5, r3
 8000ce8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cec:	fb09 4413 	mls	r4, r9, r3, r4
 8000cf0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cf4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf8:	45a6      	cmp	lr, r4
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x1da>
 8000cfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000d00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d04:	d26c      	bcs.n	8000de0 <__udivmoddi4+0x2ac>
 8000d06:	45a6      	cmp	lr, r4
 8000d08:	d96a      	bls.n	8000de0 <__udivmoddi4+0x2ac>
 8000d0a:	3b02      	subs	r3, #2
 8000d0c:	4464      	add	r4, ip
 8000d0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d12:	fba3 9502 	umull	r9, r5, r3, r2
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	42ac      	cmp	r4, r5
 8000d1c:	46c8      	mov	r8, r9
 8000d1e:	46ae      	mov	lr, r5
 8000d20:	d356      	bcc.n	8000dd0 <__udivmoddi4+0x29c>
 8000d22:	d053      	beq.n	8000dcc <__udivmoddi4+0x298>
 8000d24:	b156      	cbz	r6, 8000d3c <__udivmoddi4+0x208>
 8000d26:	ebb0 0208 	subs.w	r2, r0, r8
 8000d2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d32:	40ca      	lsrs	r2, r1
 8000d34:	40cc      	lsrs	r4, r1
 8000d36:	4317      	orrs	r7, r2
 8000d38:	e9c6 7400 	strd	r7, r4, [r6]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	f1c3 0120 	rsb	r1, r3, #32
 8000d48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000d50:	fa25 f101 	lsr.w	r1, r5, r1
 8000d54:	409d      	lsls	r5, r3
 8000d56:	432a      	orrs	r2, r5
 8000d58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5c:	fa1f fe8c 	uxth.w	lr, ip
 8000d60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d64:	fb07 1510 	mls	r5, r7, r0, r1
 8000d68:	0c11      	lsrs	r1, r2, #16
 8000d6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000d72:	428d      	cmp	r5, r1
 8000d74:	fa04 f403 	lsl.w	r4, r4, r3
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x258>
 8000d7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d82:	d22f      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000d84:	428d      	cmp	r5, r1
 8000d86:	d92d      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4461      	add	r1, ip
 8000d8c:	1b49      	subs	r1, r1, r5
 8000d8e:	b292      	uxth	r2, r2
 8000d90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d94:	fb07 1115 	mls	r1, r7, r5, r1
 8000d98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000da0:	4291      	cmp	r1, r2
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x282>
 8000da4:	eb1c 0202 	adds.w	r2, ip, r2
 8000da8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dac:	d216      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000dae:	4291      	cmp	r1, r2
 8000db0:	d914      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000db2:	3d02      	subs	r5, #2
 8000db4:	4462      	add	r2, ip
 8000db6:	1a52      	subs	r2, r2, r1
 8000db8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000dbc:	e738      	b.n	8000c30 <__udivmoddi4+0xfc>
 8000dbe:	4631      	mov	r1, r6
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e708      	b.n	8000bd6 <__udivmoddi4+0xa2>
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e6e6      	b.n	8000b96 <__udivmoddi4+0x62>
 8000dc8:	4610      	mov	r0, r2
 8000dca:	e6fb      	b.n	8000bc4 <__udivmoddi4+0x90>
 8000dcc:	4548      	cmp	r0, r9
 8000dce:	d2a9      	bcs.n	8000d24 <__udivmoddi4+0x1f0>
 8000dd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000dd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	e7a3      	b.n	8000d24 <__udivmoddi4+0x1f0>
 8000ddc:	4645      	mov	r5, r8
 8000dde:	e7ea      	b.n	8000db6 <__udivmoddi4+0x282>
 8000de0:	462b      	mov	r3, r5
 8000de2:	e794      	b.n	8000d0e <__udivmoddi4+0x1da>
 8000de4:	4640      	mov	r0, r8
 8000de6:	e7d1      	b.n	8000d8c <__udivmoddi4+0x258>
 8000de8:	46d0      	mov	r8, sl
 8000dea:	e77b      	b.n	8000ce4 <__udivmoddi4+0x1b0>
 8000dec:	3d02      	subs	r5, #2
 8000dee:	4462      	add	r2, ip
 8000df0:	e732      	b.n	8000c58 <__udivmoddi4+0x124>
 8000df2:	4608      	mov	r0, r1
 8000df4:	e70a      	b.n	8000c0c <__udivmoddi4+0xd8>
 8000df6:	4464      	add	r4, ip
 8000df8:	3802      	subs	r0, #2
 8000dfa:	e742      	b.n	8000c82 <__udivmoddi4+0x14e>

08000dfc <__aeabi_idiv0>:
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f002 fa4c 	bl	80032a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f83a 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f000 fa96 	bl	800133c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e10:	f000 fa6c 	bl	80012ec <MX_DMA_Init>
  MX_TIM3_Init();
 8000e14:	f000 f89e 	bl	8000f54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e18:	f000 f8f0 	bl	8000ffc <MX_TIM4_Init>
  MX_TIM6_Init();
 8000e1c:	f000 f942 	bl	80010a4 <MX_TIM6_Init>
  MX_USART2_UART_Init();
 8000e20:	f000 fa3a 	bl	8001298 <MX_USART2_UART_Init>
  MX_TIM8_Init();
 8000e24:	f000 f9aa 	bl	800117c <MX_TIM8_Init>
  MX_TIM7_Init();
 8000e28:	f000 f972 	bl	8001110 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	480d      	ldr	r0, [pc, #52]	; (8000e64 <main+0x64>)
 8000e30:	f003 ff1a 	bl	8004c68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8000e34:	2104      	movs	r1, #4
 8000e36:	480b      	ldr	r0, [pc, #44]	; (8000e64 <main+0x64>)
 8000e38:	f003 ff16 	bl	8004c68 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000e3c:	2104      	movs	r1, #4
 8000e3e:	480a      	ldr	r0, [pc, #40]	; (8000e68 <main+0x68>)
 8000e40:	f004 f880 	bl	8004f44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000e44:	2104      	movs	r1, #4
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <main+0x6c>)
 8000e48:	f004 f87c 	bl	8004f44 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8000e4c:	4808      	ldr	r0, [pc, #32]	; (8000e70 <main+0x70>)
 8000e4e:	f003 fe4b 	bl	8004ae8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000e52:	4808      	ldr	r0, [pc, #32]	; (8000e74 <main+0x74>)
 8000e54:	f003 fe48 	bl	8004ae8 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, rxbuffer, sizeof(rxbuffer));
 8000e58:	2211      	movs	r2, #17
 8000e5a:	4907      	ldr	r1, [pc, #28]	; (8000e78 <main+0x78>)
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <main+0x7c>)
 8000e5e:	f004 ff28 	bl	8005cb2 <HAL_UART_Receive_DMA>
// HAL_UART_Transmit_DMA(&huart2, y, sizeof(y));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <main+0x62>
 8000e64:	20000174 	.word	0x20000174
 8000e68:	20000054 	.word	0x20000054
 8000e6c:	2000009c 	.word	0x2000009c
 8000e70:	200000e4 	.word	0x200000e4
 8000e74:	2000012c 	.word	0x2000012c
 8000e78:	20000320 	.word	0x20000320
 8000e7c:	200001bc 	.word	0x200001bc

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	2230      	movs	r2, #48	; 0x30
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f006 f828 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <SystemClock_Config+0xd0>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ef4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ef8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efe:	2304      	movs	r3, #4
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f02:	f107 0320 	add.w	r3, r7, #32
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 f906 	bl	8004118 <HAL_RCC_OscConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f12:	f001 ff29 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f16:	230f      	movs	r3, #15
 8000f18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	2105      	movs	r1, #5
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fb67 	bl	8004608 <HAL_RCC_ClockConfig>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f40:	f001 ff12 	bl	8002d68 <Error_Handler>
  }
}
 8000f44:	bf00      	nop
 8000f46:	3750      	adds	r7, #80	; 0x50
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b08c      	sub	sp, #48	; 0x30
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	2224      	movs	r2, #36	; 0x24
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 ffbe 	bl	8006ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f72:	4a21      	ldr	r2, [pc, #132]	; (8000ff8 <MX_TIM3_Init+0xa4>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f96:	2303      	movs	r3, #3
 8000f98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000fc2:	f003 ff19 	bl	8004df8 <HAL_TIM_Encoder_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000fcc:	f001 fecc 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_TIM3_Init+0xa0>)
 8000fde:	f004 fca7 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000fe8:	f001 febe 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fec:	bf00      	nop
 8000fee:	3730      	adds	r7, #48	; 0x30
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000054 	.word	0x20000054
 8000ff8:	40000400 	.word	0x40000400

08000ffc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08c      	sub	sp, #48	; 0x30
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2224      	movs	r2, #36	; 0x24
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f005 ff6a 	bl	8006ee4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_TIM4_Init+0xa0>)
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <MX_TIM4_Init+0xa4>)
 800101c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <MX_TIM4_Init+0xa0>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b1d      	ldr	r3, [pc, #116]	; (800109c <MX_TIM4_Init+0xa0>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800102a:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_TIM4_Init+0xa0>)
 800102c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001030:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001032:	4b1a      	ldr	r3, [pc, #104]	; (800109c <MX_TIM4_Init+0xa0>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <MX_TIM4_Init+0xa0>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800103e:	2303      	movs	r3, #3
 8001040:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001052:	2300      	movs	r3, #0
 8001054:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001056:	2301      	movs	r3, #1
 8001058:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	4619      	mov	r1, r3
 8001068:	480c      	ldr	r0, [pc, #48]	; (800109c <MX_TIM4_Init+0xa0>)
 800106a:	f003 fec5 	bl	8004df8 <HAL_TIM_Encoder_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001074:	f001 fe78 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM4_Init+0xa0>)
 8001086:	f004 fc53 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001090:	f001 fe6a 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000009c 	.word	0x2000009c
 80010a0:	40000800 	.word	0x40000800

080010a4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	463b      	mov	r3, r7
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <MX_TIM6_Init+0x64>)
 80010b4:	4a15      	ldr	r2, [pc, #84]	; (800110c <MX_TIM6_Init+0x68>)
 80010b6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <MX_TIM6_Init+0x64>)
 80010ba:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80010be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c0:	4b11      	ldr	r3, [pc, #68]	; (8001108 <MX_TIM6_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80010c6:	4b10      	ldr	r3, [pc, #64]	; (8001108 <MX_TIM6_Init+0x64>)
 80010c8:	2263      	movs	r2, #99	; 0x63
 80010ca:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <MX_TIM6_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80010d2:	480d      	ldr	r0, [pc, #52]	; (8001108 <MX_TIM6_Init+0x64>)
 80010d4:	f003 fcb8 	bl	8004a48 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80010de:	f001 fe43 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80010ea:	463b      	mov	r3, r7
 80010ec:	4619      	mov	r1, r3
 80010ee:	4806      	ldr	r0, [pc, #24]	; (8001108 <MX_TIM6_Init+0x64>)
 80010f0:	f004 fc1e 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80010fa:	f001 fe35 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000e4 	.word	0x200000e4
 800110c:	40001000 	.word	0x40001000

08001110 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM7_Init+0x64>)
 8001120:	4a15      	ldr	r2, [pc, #84]	; (8001178 <MX_TIM7_Init+0x68>)
 8001122:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8399;
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_TIM7_Init+0x64>)
 8001126:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800112a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_TIM7_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <MX_TIM7_Init+0x64>)
 8001134:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001138:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_TIM7_Init+0x64>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001140:	480c      	ldr	r0, [pc, #48]	; (8001174 <MX_TIM7_Init+0x64>)
 8001142:	f003 fc81 	bl	8004a48 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800114c:	f001 fe0c 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_TIM7_Init+0x64>)
 800115e:	f004 fbe7 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001168:	f001 fdfe 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	2000012c 	.word	0x2000012c
 8001178:	40001400 	.word	0x40001400

0800117c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b092      	sub	sp, #72	; 0x48
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2220      	movs	r2, #32
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f005 fe9c 	bl	8006ee4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <MX_TIM8_Init+0x114>)
 80011ae:	4a39      	ldr	r2, [pc, #228]	; (8001294 <MX_TIM8_Init+0x118>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80011b2:	4b37      	ldr	r3, [pc, #220]	; (8001290 <MX_TIM8_Init+0x114>)
 80011b4:	2253      	movs	r2, #83	; 0x53
 80011b6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b35      	ldr	r3, [pc, #212]	; (8001290 <MX_TIM8_Init+0x114>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80011be:	4b34      	ldr	r3, [pc, #208]	; (8001290 <MX_TIM8_Init+0x114>)
 80011c0:	2263      	movs	r2, #99	; 0x63
 80011c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c4:	4b32      	ldr	r3, [pc, #200]	; (8001290 <MX_TIM8_Init+0x114>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80011ca:	4b31      	ldr	r3, [pc, #196]	; (8001290 <MX_TIM8_Init+0x114>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <MX_TIM8_Init+0x114>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80011d6:	482e      	ldr	r0, [pc, #184]	; (8001290 <MX_TIM8_Init+0x114>)
 80011d8:	f003 fcf6 	bl	8004bc8 <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f001 fdc1 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e6:	2300      	movs	r3, #0
 80011e8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80011ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011f2:	4619      	mov	r1, r3
 80011f4:	4826      	ldr	r0, [pc, #152]	; (8001290 <MX_TIM8_Init+0x114>)
 80011f6:	f004 fb9b 	bl	8005930 <HAL_TIMEx_MasterConfigSynchronization>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 8001200:	f001 fdb2 	bl	8002d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001204:	2360      	movs	r3, #96	; 0x60
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800121c:	2300      	movs	r3, #0
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001220:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4819      	ldr	r0, [pc, #100]	; (8001290 <MX_TIM8_Init+0x114>)
 800122a:	f004 f821 	bl	8005270 <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8001234:	f001 fd98 	bl	8002d68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	2204      	movs	r2, #4
 800123e:	4619      	mov	r1, r3
 8001240:	4813      	ldr	r0, [pc, #76]	; (8001290 <MX_TIM8_Init+0x114>)
 8001242:	f004 f815 	bl	8005270 <HAL_TIM_PWM_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 800124c:	f001 fd8c 	bl	8002d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001254:	2300      	movs	r3, #0
 8001256:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001264:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001268:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4619      	mov	r1, r3
 8001272:	4807      	ldr	r0, [pc, #28]	; (8001290 <MX_TIM8_Init+0x114>)
 8001274:	f004 fbd8 	bl	8005a28 <HAL_TIMEx_ConfigBreakDeadTime>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM8_Init+0x106>
  {
    Error_Handler();
 800127e:	f001 fd73 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001282:	4803      	ldr	r0, [pc, #12]	; (8001290 <MX_TIM8_Init+0x114>)
 8001284:	f001 fe84 	bl	8002f90 <HAL_TIM_MspPostInit>

}
 8001288:	bf00      	nop
 800128a:	3748      	adds	r7, #72	; 0x48
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000174 	.word	0x20000174
 8001294:	40010400 	.word	0x40010400

08001298 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 800129e:	4a12      	ldr	r2, [pc, #72]	; (80012e8 <MX_USART2_UART_Init+0x50>)
 80012a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012be:	220c      	movs	r2, #12
 80012c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ce:	4805      	ldr	r0, [pc, #20]	; (80012e4 <MX_USART2_UART_Init+0x4c>)
 80012d0:	f004 fc10 	bl	8005af4 <HAL_UART_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012da:	f001 fd45 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200001bc 	.word	0x200001bc
 80012e8:	40004400 	.word	0x40004400

080012ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	607b      	str	r3, [r7, #4]
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <MX_DMA_Init+0x4c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <MX_DMA_Init+0x4c>)
 80012fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <MX_DMA_Init+0x4c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2100      	movs	r1, #0
 8001312:	2010      	movs	r0, #16
 8001314:	f002 f911 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001318:	2010      	movs	r0, #16
 800131a:	f002 f92a 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2011      	movs	r0, #17
 8001324:	f002 f909 	bl	800353a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001328:	2011      	movs	r0, #17
 800132a:	f002 f922 	bl	8003572 <HAL_NVIC_EnableIRQ>

}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	; 0x28
 8001340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	f107 0314 	add.w	r3, r7, #20
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
 8001350:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b43      	ldr	r3, [pc, #268]	; (8001464 <MX_GPIO_Init+0x128>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a42      	ldr	r2, [pc, #264]	; (8001464 <MX_GPIO_Init+0x128>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <MX_GPIO_Init+0x128>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <MX_GPIO_Init+0x128>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a3b      	ldr	r2, [pc, #236]	; (8001464 <MX_GPIO_Init+0x128>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b39      	ldr	r3, [pc, #228]	; (8001464 <MX_GPIO_Init+0x128>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	4b35      	ldr	r3, [pc, #212]	; (8001464 <MX_GPIO_Init+0x128>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <MX_GPIO_Init+0x128>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b32      	ldr	r3, [pc, #200]	; (8001464 <MX_GPIO_Init+0x128>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	4b2e      	ldr	r3, [pc, #184]	; (8001464 <MX_GPIO_Init+0x128>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <MX_GPIO_Init+0x128>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <MX_GPIO_Init+0x128>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	603b      	str	r3, [r7, #0]
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <MX_GPIO_Init+0x128>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <MX_GPIO_Init+0x128>)
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <MX_GPIO_Init+0x128>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0308 	and.w	r3, r3, #8
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f640 4103 	movw	r1, #3075	; 0xc03
 80013e4:	4820      	ldr	r0, [pc, #128]	; (8001468 <MX_GPIO_Init+0x12c>)
 80013e6:	f002 fe7d 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80013f0:	481e      	ldr	r0, [pc, #120]	; (800146c <MX_GPIO_Init+0x130>)
 80013f2:	f002 fe77 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	481c      	ldr	r0, [pc, #112]	; (8001470 <MX_GPIO_Init+0x134>)
 80013fe:	f002 fe71 	bl	80040e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11;
 8001402:	f640 4303 	movw	r3, #3075	; 0xc03
 8001406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	f107 0314 	add.w	r3, r7, #20
 8001418:	4619      	mov	r1, r3
 800141a:	4813      	ldr	r0, [pc, #76]	; (8001468 <MX_GPIO_Init+0x12c>)
 800141c:	f002 fcc6 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001420:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142e:	2300      	movs	r3, #0
 8001430:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_GPIO_Init+0x130>)
 800143a:	f002 fcb7 	bl	8003dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_GPIO_Init+0x134>)
 8001458:	f002 fca8 	bl	8003dac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020800 	.word	0x40020800
 800146c:	40020400 	.word	0x40020400
 8001470:	40020000 	.word	0x40020000

08001474 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_UART_TxCpltCallback+0x38>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d10c      	bne.n	80014a2 <HAL_UART_TxCpltCallback+0x2e>
	{
		biendem++;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_UART_TxCpltCallback+0x3c>)
 800148a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	4b08      	ldr	r3, [pc, #32]	; (80014b4 <HAL_UART_TxCpltCallback+0x40>)
 8001494:	f7fe fe9e 	bl	80001d4 <__adddf3>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4904      	ldr	r1, [pc, #16]	; (80014b0 <HAL_UART_TxCpltCallback+0x3c>)
 800149e:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200001bc 	.word	0x200001bc
 80014b0:	20000410 	.word	0x20000410
 80014b4:	3ff00000 	.word	0x3ff00000

080014b8 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b8:	b5b0      	push	{r4, r5, r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart2.Instance)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_UART_RxCpltCallback+0x18c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 80b6 	bne.w	800163a <HAL_UART_RxCpltCallback+0x182>
	{

		if(rxbuffer[14] == 'y') //+00.00/+00.00/y/n
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 80014d0:	7b9b      	ldrb	r3, [r3, #14]
 80014d2:	2b79      	cmp	r3, #121	; 0x79
 80014d4:	f040 80ae 	bne.w	8001634 <HAL_UART_RxCpltCallback+0x17c>
		{
			setpoint1 = (double)(rxbuffer[1]-48)*10 + (double)(rxbuffer[2]-48)
 80014d8:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	3b30      	subs	r3, #48	; 0x30
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffc4 	bl	800046c <__aeabi_i2d>
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_UART_RxCpltCallback+0x194>)
 80014ea:	f7ff f829 	bl	8000540 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4614      	mov	r4, r2
 80014f4:	461d      	mov	r5, r3
 80014f6:	4b54      	ldr	r3, [pc, #336]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 80014f8:	789b      	ldrb	r3, [r3, #2]
 80014fa:	3b30      	subs	r3, #48	; 0x30
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe ffb5 	bl	800046c <__aeabi_i2d>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4620      	mov	r0, r4
 8001508:	4629      	mov	r1, r5
 800150a:	f7fe fe63 	bl	80001d4 <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4614      	mov	r4, r2
 8001514:	461d      	mov	r5, r3
						+ (double)(rxbuffer[4]-48)/10 + (double)(rxbuffer[5]-48)/100;
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 8001518:	791b      	ldrb	r3, [r3, #4]
 800151a:	3b30      	subs	r3, #48	; 0x30
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe ffa5 	bl	800046c <__aeabi_i2d>
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <HAL_UART_RxCpltCallback+0x194>)
 8001528:	f7ff f934 	bl	8000794 <__aeabi_ddiv>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fe4e 	bl	80001d4 <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4614      	mov	r4, r2
 800153e:	461d      	mov	r5, r3
 8001540:	4b41      	ldr	r3, [pc, #260]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 8001542:	795b      	ldrb	r3, [r3, #5]
 8001544:	3b30      	subs	r3, #48	; 0x30
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe ff90 	bl	800046c <__aeabi_i2d>
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_UART_RxCpltCallback+0x198>)
 8001552:	f7ff f91f 	bl	8000794 <__aeabi_ddiv>
 8001556:	4602      	mov	r2, r0
 8001558:	460b      	mov	r3, r1
 800155a:	4620      	mov	r0, r4
 800155c:	4629      	mov	r1, r5
 800155e:	f7fe fe39 	bl	80001d4 <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
			setpoint1 = (double)(rxbuffer[1]-48)*10 + (double)(rxbuffer[2]-48)
 8001566:	4610      	mov	r0, r2
 8001568:	4619      	mov	r1, r3
 800156a:	f7ff fa83 	bl	8000a74 <__aeabi_d2iz>
 800156e:	4603      	mov	r3, r0
 8001570:	4a38      	ldr	r2, [pc, #224]	; (8001654 <HAL_UART_RxCpltCallback+0x19c>)
 8001572:	6013      	str	r3, [r2, #0]
			setpoint2 = (double)(rxbuffer[8]-48)*10 + (double)(rxbuffer[9]-48)
 8001574:	4b34      	ldr	r3, [pc, #208]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 8001576:	7a1b      	ldrb	r3, [r3, #8]
 8001578:	3b30      	subs	r3, #48	; 0x30
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ff76 	bl	800046c <__aeabi_i2d>
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	4b31      	ldr	r3, [pc, #196]	; (800164c <HAL_UART_RxCpltCallback+0x194>)
 8001586:	f7fe ffdb 	bl	8000540 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4614      	mov	r4, r2
 8001590:	461d      	mov	r5, r3
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 8001594:	7a5b      	ldrb	r3, [r3, #9]
 8001596:	3b30      	subs	r3, #48	; 0x30
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe ff67 	bl	800046c <__aeabi_i2d>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	4620      	mov	r0, r4
 80015a4:	4629      	mov	r1, r5
 80015a6:	f7fe fe15 	bl	80001d4 <__adddf3>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4614      	mov	r4, r2
 80015b0:	461d      	mov	r5, r3
						+ (double)(rxbuffer[11]-48)/10 + (double)(rxbuffer[12]-48)/100 ;
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 80015b4:	7adb      	ldrb	r3, [r3, #11]
 80015b6:	3b30      	subs	r3, #48	; 0x30
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ff57 	bl	800046c <__aeabi_i2d>
 80015be:	f04f 0200 	mov.w	r2, #0
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <HAL_UART_RxCpltCallback+0x194>)
 80015c4:	f7ff f8e6 	bl	8000794 <__aeabi_ddiv>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7fe fe00 	bl	80001d4 <__adddf3>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	461d      	mov	r5, r3
 80015dc:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 80015de:	7b1b      	ldrb	r3, [r3, #12]
 80015e0:	3b30      	subs	r3, #48	; 0x30
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ff42 	bl	800046c <__aeabi_i2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_RxCpltCallback+0x198>)
 80015ee:	f7ff f8d1 	bl	8000794 <__aeabi_ddiv>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7fe fdeb 	bl	80001d4 <__adddf3>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
			setpoint2 = (double)(rxbuffer[8]-48)*10 + (double)(rxbuffer[9]-48)
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fa35 	bl	8000a74 <__aeabi_d2iz>
 800160a:	4603      	mov	r3, r0
 800160c:	4a12      	ldr	r2, [pc, #72]	; (8001658 <HAL_UART_RxCpltCallback+0x1a0>)
 800160e:	6013      	str	r3, [r2, #0]
			if(rxbuffer[0] == '-')
 8001610:	4b0d      	ldr	r3, [pc, #52]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b2d      	cmp	r3, #45	; 0x2d
 8001616:	d104      	bne.n	8001622 <HAL_UART_RxCpltCallback+0x16a>
			{
				 setpoint1 = -setpoint1;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_UART_RxCpltCallback+0x19c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	425b      	negs	r3, r3
 800161e:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <HAL_UART_RxCpltCallback+0x19c>)
 8001620:	6013      	str	r3, [r2, #0]
			}
			if(rxbuffer[7] == '-')
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_UART_RxCpltCallback+0x190>)
 8001624:	79db      	ldrb	r3, [r3, #7]
 8001626:	2b2d      	cmp	r3, #45	; 0x2d
 8001628:	d104      	bne.n	8001634 <HAL_UART_RxCpltCallback+0x17c>
			{
				setpoint2 = -setpoint2;
 800162a:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_UART_RxCpltCallback+0x1a0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	425b      	negs	r3, r3
 8001630:	4a09      	ldr	r2, [pc, #36]	; (8001658 <HAL_UART_RxCpltCallback+0x1a0>)
 8001632:	6013      	str	r3, [r2, #0]
			}
		}
		temp_rxbuffer[14] = '0';
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_UART_RxCpltCallback+0x1a4>)
 8001636:	2230      	movs	r2, #48	; 0x30
 8001638:	739a      	strb	r2, [r3, #14]


	}
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bdb0      	pop	{r4, r5, r7, pc}
 8001642:	bf00      	nop
 8001644:	200001bc 	.word	0x200001bc
 8001648:	20000320 	.word	0x20000320
 800164c:	40240000 	.word	0x40240000
 8001650:	40590000 	.word	0x40590000
 8001654:	20000008 	.word	0x20000008
 8001658:	20000018 	.word	0x20000018
 800165c:	200002e8 	.word	0x200002e8

08001660 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001664:	b08e      	sub	sp, #56	; 0x38
 8001666:	af00      	add	r7, sp, #0
 8001668:	6278      	str	r0, [r7, #36]	; 0x24
	if(htim->Instance == htim6.Instance)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4bbc      	ldr	r3, [pc, #752]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	f041 832d 	bne.w	8002cd2 <HAL_TIM_PeriodElapsedCallback+0x1672>
	{
		/* ----------Dong co trai (dong co 1)------------- */
		cnt_encoder1 = __HAL_TIM_GET_COUNTER(&htim3);
 8001678:	4bba      	ldr	r3, [pc, #744]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe fee4 	bl	800044c <__aeabi_ui2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	49b7      	ldr	r1, [pc, #732]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x308>)
 800168a:	e9c1 2300 	strd	r2, r3, [r1]
		if(abs((int)(cnt_encoder1 - pre_cnt_encoder1)) < 13200) motor1Velocity2 = (cnt_encoder1 - pre_cnt_encoder1)*60.0*100/1320;
 800168e:	4bb6      	ldr	r3, [pc, #728]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001694:	4bb5      	ldr	r3, [pc, #724]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe fd99 	bl	80001d0 <__aeabi_dsub>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4610      	mov	r0, r2
 80016a4:	4619      	mov	r1, r3
 80016a6:	f7ff f9e5 	bl	8000a74 <__aeabi_d2iz>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4ab0      	ldr	r2, [pc, #704]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	db3c      	blt.n	800172c <HAL_TIM_PeriodElapsedCallback+0xcc>
 80016b2:	4bad      	ldr	r3, [pc, #692]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016b8:	4bac      	ldr	r3, [pc, #688]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016be:	f7fe fd87 	bl	80001d0 <__aeabi_dsub>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	f7ff f9d3 	bl	8000a74 <__aeabi_d2iz>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f243 328f 	movw	r2, #13199	; 0x338f
 80016d4:	4293      	cmp	r3, r2
 80016d6:	dc29      	bgt.n	800172c <HAL_TIM_PeriodElapsedCallback+0xcc>
 80016d8:	4ba3      	ldr	r3, [pc, #652]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016de:	4ba3      	ldr	r3, [pc, #652]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe fd74 	bl	80001d0 <__aeabi_dsub>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4610      	mov	r0, r2
 80016ee:	4619      	mov	r1, r3
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b9f      	ldr	r3, [pc, #636]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80016f6:	f7fe ff23 	bl	8000540 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	4b9c      	ldr	r3, [pc, #624]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001708:	f7fe ff1a 	bl	8000540 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4610      	mov	r0, r2
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	4b98      	ldr	r3, [pc, #608]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 800171a:	f7ff f83b 	bl	8000794 <__aeabi_ddiv>
 800171e:	4602      	mov	r2, r0
 8001720:	460b      	mov	r3, r1
 8001722:	4610      	mov	r0, r2
 8001724:	4619      	mov	r1, r3
 8001726:	4b96      	ldr	r3, [pc, #600]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001728:	e9c3 0100 	strd	r0, r1, [r3]
		motor1Velocity = 0.9753*motor1Velocity1 + 0.02469*motor1Velocity3; //Bộ l�?c thông thấp
 800172c:	4b95      	ldr	r3, [pc, #596]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800172e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001732:	a37d      	add	r3, pc, #500	; (adr r3, 8001928 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 8001734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001738:	f7fe ff02 	bl	8000540 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4614      	mov	r4, r2
 8001742:	461d      	mov	r5, r3
 8001744:	4b90      	ldr	r3, [pc, #576]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800174a:	a379      	add	r3, pc, #484	; (adr r3, 8001930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001750:	f7fe fef6 	bl	8000540 <__aeabi_dmul>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe fd3a 	bl	80001d4 <__adddf3>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	4b88      	ldr	r3, [pc, #544]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800176a:	e9c3 0100 	strd	r0, r1, [r3]
		motor1Velocity1 = motor1Velocity; //y(k-1) = y(k)
 800176e:	4b87      	ldr	r3, [pc, #540]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	4983      	ldr	r1, [pc, #524]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001776:	e9c1 2300 	strd	r2, r3, [r1]
		motor1Velocity3 = motor1Velocity2; // y(k-3) = y(k-2);
 800177a:	4b81      	ldr	r3, [pc, #516]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	4981      	ldr	r1, [pc, #516]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001782:	e9c1 2300 	strd	r2, r3, [r1]
		pre_cnt_encoder1 = cnt_encoder1;
 8001786:	4b78      	ldr	r3, [pc, #480]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800178c:	4977      	ldr	r1, [pc, #476]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800178e:	e9c1 2300 	strd	r2, r3, [r1]

		e1_c = setpoint1 - motor1Velocity; //Sai số giữa sai số tốc độ đặt và tốc độ thực tế
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fe68 	bl	800046c <__aeabi_i2d>
 800179c:	4b7b      	ldr	r3, [pc, #492]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017a2:	f7fe fd15 	bl	80001d0 <__aeabi_dsub>
 80017a6:	4602      	mov	r2, r0
 80017a8:	460b      	mov	r3, r1
 80017aa:	4610      	mov	r0, r2
 80017ac:	4619      	mov	r1, r3
 80017ae:	4b79      	ldr	r3, [pc, #484]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017b0:	e9c3 0100 	strd	r0, r1, [r3]

		motor1Velocity_m = 1.921*motor1Velocity1_m - 0.9231*motor1Velocity2_m + 0.001217*setpoint1 + 0.001185*setpoint1; // Ngõ ra của mô hình chuẩn
 80017b4:	4b78      	ldr	r3, [pc, #480]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ba:	a35f      	add	r3, pc, #380	; (adr r3, 8001938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe febe 	bl	8000540 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4614      	mov	r4, r2
 80017ca:	461d      	mov	r5, r3
 80017cc:	4b73      	ldr	r3, [pc, #460]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d2:	a35b      	add	r3, pc, #364	; (adr r3, 8001940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80017d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d8:	f7fe feb2 	bl	8000540 <__aeabi_dmul>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4620      	mov	r0, r4
 80017e2:	4629      	mov	r1, r5
 80017e4:	f7fe fcf4 	bl	80001d0 <__aeabi_dsub>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4614      	mov	r4, r2
 80017ee:	461d      	mov	r5, r3
 80017f0:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7fe fe39 	bl	800046c <__aeabi_i2d>
 80017fa:	a353      	add	r3, pc, #332	; (adr r3, 8001948 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 80017fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001800:	f7fe fe9e 	bl	8000540 <__aeabi_dmul>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4620      	mov	r0, r4
 800180a:	4629      	mov	r1, r5
 800180c:	f7fe fce2 	bl	80001d4 <__adddf3>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4614      	mov	r4, r2
 8001816:	461d      	mov	r5, r3
 8001818:	4b5d      	ldr	r3, [pc, #372]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe25 	bl	800046c <__aeabi_i2d>
 8001822:	a34b      	add	r3, pc, #300	; (adr r3, 8001950 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fe8a 	bl	8000540 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7fe fcce 	bl	80001d4 <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001842:	e9c3 0100 	strd	r0, r1, [r3]
		e1_m = motor1Velocity - motor1Velocity1_m; //Sai số giữa tốc độ của đối tượng động cơ DC và tốc độ theo mô hình chuẩn
 8001846:	4b51      	ldr	r3, [pc, #324]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	4b52      	ldr	r3, [pc, #328]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fcbd 	bl	80001d0 <__aeabi_dsub>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	4b51      	ldr	r3, [pc, #324]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001860:	e9c3 0100 	strd	r0, r1, [r3]


		delta1_Kp = 0.1225*e1_c1 - 0.1225*e1_c2 + 1.921*delta1_Kp_k1 - 0.9231*delta1_Kp_k2;
 8001864:	4b50      	ldr	r3, [pc, #320]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001866:	e9d3 0100 	ldrd	r0, r1, [r3]
 800186a:	a33b      	add	r3, pc, #236	; (adr r3, 8001958 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 800186c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001870:	f7fe fe66 	bl	8000540 <__aeabi_dmul>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4614      	mov	r4, r2
 800187a:	461d      	mov	r5, r3
 800187c:	4b4b      	ldr	r3, [pc, #300]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800187e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001882:	a335      	add	r3, pc, #212	; (adr r3, 8001958 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe fe5a 	bl	8000540 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fc9c 	bl	80001d0 <__aeabi_dsub>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	4614      	mov	r4, r2
 800189e:	461d      	mov	r5, r3
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80018a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a6:	a324      	add	r3, pc, #144	; (adr r3, 8001938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	f7fe fe48 	bl	8000540 <__aeabi_dmul>
 80018b0:	4602      	mov	r2, r0
 80018b2:	460b      	mov	r3, r1
 80018b4:	4620      	mov	r0, r4
 80018b6:	4629      	mov	r1, r5
 80018b8:	f7fe fc8c 	bl	80001d4 <__adddf3>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4614      	mov	r4, r2
 80018c2:	461d      	mov	r5, r3
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80018c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ca:	a31d      	add	r3, pc, #116	; (adr r3, 8001940 <HAL_TIM_PeriodElapsedCallback+0x2e0>)
 80018cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018d0:	f7fe fe36 	bl	8000540 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4620      	mov	r0, r4
 80018da:	4629      	mov	r1, r5
 80018dc:	f7fe fc78 	bl	80001d0 <__aeabi_dsub>
 80018e0:	4602      	mov	r2, r0
 80018e2:	460b      	mov	r3, r1
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	4b33      	ldr	r3, [pc, #204]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018ea:	e9c3 0100 	strd	r0, r1, [r3]
		Kp1 += -gamma1*e1_m*delta1_Kp;
 80018ee:	4b33      	ldr	r3, [pc, #204]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	4690      	mov	r8, r2
 80018f6:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	4640      	mov	r0, r8
 8001902:	4649      	mov	r1, r9
 8001904:	f7fe fe1c 	bl	8000540 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fe13 	bl	8000540 <__aeabi_dmul>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	e04d      	b.n	80019c0 <HAL_TIM_PeriodElapsedCallback+0x360>
 8001924:	f3af 8000 	nop.w
 8001928:	58793dd9 	.word	0x58793dd9
 800192c:	3fef35a8 	.word	0x3fef35a8
 8001930:	da272863 	.word	0xda272863
 8001934:	3f994855 	.word	0x3f994855
 8001938:	7ef9db23 	.word	0x7ef9db23
 800193c:	3ffebc6a 	.word	0x3ffebc6a
 8001940:	02de00d2 	.word	0x02de00d2
 8001944:	3fed8a09 	.word	0x3fed8a09
 8001948:	ccc03793 	.word	0xccc03793
 800194c:	3f53f077 	.word	0x3f53f077
 8001950:	0fba8827 	.word	0x0fba8827
 8001954:	3f536a40 	.word	0x3f536a40
 8001958:	f5c28f5c 	.word	0xf5c28f5c
 800195c:	3fbf5c28 	.word	0x3fbf5c28
 8001960:	200000e4 	.word	0x200000e4
 8001964:	20000054 	.word	0x20000054
 8001968:	20000338 	.word	0x20000338
 800196c:	20000340 	.word	0x20000340
 8001970:	ffffcc71 	.word	0xffffcc71
 8001974:	404e0000 	.word	0x404e0000
 8001978:	40590000 	.word	0x40590000
 800197c:	4094a000 	.word	0x4094a000
 8001980:	20000358 	.word	0x20000358
 8001984:	20000350 	.word	0x20000350
 8001988:	20000360 	.word	0x20000360
 800198c:	20000348 	.word	0x20000348
 8001990:	20000008 	.word	0x20000008
 8001994:	20000380 	.word	0x20000380
 8001998:	20000370 	.word	0x20000370
 800199c:	20000378 	.word	0x20000378
 80019a0:	20000368 	.word	0x20000368
 80019a4:	20000398 	.word	0x20000398
 80019a8:	20000388 	.word	0x20000388
 80019ac:	20000390 	.word	0x20000390
 80019b0:	200003c0 	.word	0x200003c0
 80019b4:	200003c8 	.word	0x200003c8
 80019b8:	200003b0 	.word	0x200003b0
 80019bc:	20000010 	.word	0x20000010
 80019c0:	4ba7      	ldr	r3, [pc, #668]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	f7fe fc05 	bl	80001d4 <__adddf3>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	49a4      	ldr	r1, [pc, #656]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x600>)
 80019d0:	e9c1 2300 	strd	r2, r3, [r1]
		delta1_Ki = 0.0003084*e1_c1 + 0.0003043*e1_c2 + 1.921*delta1_Ki_k1 - 0.9231*delta1_Ki_k2;
 80019d4:	4ba3      	ldr	r3, [pc, #652]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x604>)
 80019d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019da:	a399      	add	r3, pc, #612	; (adr r3, 8001c40 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80019dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e0:	f7fe fdae 	bl	8000540 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4614      	mov	r4, r2
 80019ea:	461d      	mov	r5, r3
 80019ec:	4b9e      	ldr	r3, [pc, #632]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x608>)
 80019ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019f2:	a395      	add	r3, pc, #596	; (adr r3, 8001c48 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fda2 	bl	8000540 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7fe fbe6 	bl	80001d4 <__adddf3>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	461d      	mov	r5, r3
 8001a10:	4b96      	ldr	r3, [pc, #600]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001a12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a16:	a38e      	add	r3, pc, #568	; (adr r3, 8001c50 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1c:	f7fe fd90 	bl	8000540 <__aeabi_dmul>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fbd4 	bl	80001d4 <__adddf3>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4614      	mov	r4, r2
 8001a32:	461d      	mov	r5, r3
 8001a34:	4b8e      	ldr	r3, [pc, #568]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001a36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a3a:	a387      	add	r3, pc, #540	; (adr r3, 8001c58 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a40:	f7fe fd7e 	bl	8000540 <__aeabi_dmul>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fbc0 	bl	80001d0 <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4987      	ldr	r1, [pc, #540]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001a56:	e9c1 2300 	strd	r2, r3, [r1]
		Ki1 += -gamma1*e1_m*delta1_Ki;
 8001a5a:	4b87      	ldr	r3, [pc, #540]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	4692      	mov	sl, r2
 8001a62:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8001a66:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	4650      	mov	r0, sl
 8001a6e:	4659      	mov	r1, fp
 8001a70:	f7fe fd66 	bl	8000540 <__aeabi_dmul>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a82:	f7fe fd5d 	bl	8000540 <__aeabi_dmul>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4b7c      	ldr	r3, [pc, #496]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fb9e 	bl	80001d4 <__adddf3>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4978      	ldr	r1, [pc, #480]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]

		alpha1 = Kp1*(e1_c-e1_c1);
 8001aa2:	4b78      	ldr	r3, [pc, #480]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001aa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001aa8:	4b6e      	ldr	r3, [pc, #440]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	f7fe fb8f 	bl	80001d0 <__aeabi_dsub>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	4610      	mov	r0, r2
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4b69      	ldr	r3, [pc, #420]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac0:	f7fe fd3e 	bl	8000540 <__aeabi_dmul>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	496f      	ldr	r1, [pc, #444]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001aca:	e9c1 2300 	strd	r2, r3, [r1]
		beta1 = time_sample/2*Ki1*(e1_c+e1_c1);
 8001ace:	4b6f      	ldr	r3, [pc, #444]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x62c>)
 8001ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001adc:	f7fe fe5a 	bl	8000794 <__aeabi_ddiv>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	f7fe fd27 	bl	8000540 <__aeabi_dmul>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4614      	mov	r4, r2
 8001af8:	461d      	mov	r5, r3
 8001afa:	4b62      	ldr	r3, [pc, #392]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b00:	4b58      	ldr	r3, [pc, #352]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7fe fb65 	bl	80001d4 <__adddf3>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4620      	mov	r0, r4
 8001b10:	4629      	mov	r1, r5
 8001b12:	f7fe fd15 	bl	8000540 <__aeabi_dmul>
 8001b16:	4602      	mov	r2, r0
 8001b18:	460b      	mov	r3, r1
 8001b1a:	495d      	ldr	r1, [pc, #372]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001b1c:	e9c1 2300 	strd	r2, r3, [r1]
		u1_k = u1_k1 + alpha1 + beta1;
 8001b20:	4b5c      	ldr	r3, [pc, #368]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001b22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b26:	4b58      	ldr	r3, [pc, #352]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2c:	f7fe fb52 	bl	80001d4 <__adddf3>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4610      	mov	r0, r2
 8001b36:	4619      	mov	r1, r3
 8001b38:	4b55      	ldr	r3, [pc, #340]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x630>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	f7fe fb49 	bl	80001d4 <__adddf3>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4954      	ldr	r1, [pc, #336]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001b48:	e9c1 2300 	strd	r2, r3, [r1]

		motor1Velocity2_m = motor1Velocity1_m; //ym(k-2) = ym(k-1);
 8001b4c:	4b53      	ldr	r3, [pc, #332]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b52:	4953      	ldr	r1, [pc, #332]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x640>)
 8001b54:	e9c1 2300 	strd	r2, r3, [r1]
		motor1Velocity1_m = motor1Velocity_m; //ym(k-1) = ym(k);
 8001b58:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x644>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	494f      	ldr	r1, [pc, #316]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x63c>)
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]

		u1_k1 = u1_k;
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6a:	494a      	ldr	r1, [pc, #296]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x634>)
 8001b6c:	e9c1 2300 	strd	r2, r3, [r1]
		e1_c2 = e1_c1; //e(k-2) = e(k-1)
 8001b70:	4b3c      	ldr	r3, [pc, #240]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b76:	493c      	ldr	r1, [pc, #240]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001b78:	e9c1 2300 	strd	r2, r3, [r1]
		e1_c1 = e1_c; //e(k-1) = e(k);
 8001b7c:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	4938      	ldr	r1, [pc, #224]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b84:	e9c1 2300 	strd	r2, r3, [r1]

		e1_m2 = e1_m1; //em(k-2) = em(k-1);
 8001b88:	4b47      	ldr	r3, [pc, #284]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	4947      	ldr	r1, [pc, #284]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x64c>)
 8001b90:	e9c1 2300 	strd	r2, r3, [r1]
		e1_m1 = e1_m; //em(k-1) = em(k);
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	4943      	ldr	r1, [pc, #268]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x648>)
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]

		delta1_Kp_k2 = delta1_Kp_k1; // delKp(k-2) = delKp(k-1);
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	4943      	ldr	r1, [pc, #268]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x654>)
 8001ba8:	e9c1 2300 	strd	r2, r3, [r1]
		delta1_Kp_k1 = delta1_Kp;
 8001bac:	4b42      	ldr	r3, [pc, #264]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x658>)
 8001bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb2:	493f      	ldr	r1, [pc, #252]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x650>)
 8001bb4:	e9c1 2300 	strd	r2, r3, [r1]

		delta1_Ki_k2 = delta1_Ki_k1;
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	492c      	ldr	r1, [pc, #176]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001bc0:	e9c1 2300 	strd	r2, r3, [r1]
		delta1_Ki_k1 = delta1_Ki;
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	4928      	ldr	r1, [pc, #160]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001bcc:	e9c1 2300 	strd	r2, r3, [r1]

	//Thêm khâu bão hòa
		if(setpoint1 == 0) u1_k = 0;
 8001bd0:	4b3a      	ldr	r3, [pc, #232]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x65c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d106      	bne.n	8001be6 <HAL_TIM_PeriodElapsedCallback+0x586>
 8001bd8:	492f      	ldr	r1, [pc, #188]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	f04f 0300 	mov.w	r3, #0
 8001be2:	e9c1 2300 	strd	r2, r3, [r1]
		if(u1_k >= 0)
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	f04f 0300 	mov.w	r3, #0
 8001bf4:	f7fe ff2a 	bl	8000a4c <__aeabi_dcmpge>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d06f      	beq.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x67e>
		{
			if(u1_k > 100) u1_k = 100;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001c00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c04:	f04f 0200 	mov.w	r2, #0
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8001c0a:	f7fe ff29 	bl	8000a60 <__aeabi_dcmpgt>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x5c0>
 8001c14:	4920      	ldr	r1, [pc, #128]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	4b29      	ldr	r3, [pc, #164]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x660>)
 8001c1c:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_RESET); //forward
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c26:	4827      	ldr	r0, [pc, #156]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001c28:	f002 fa5c 	bl	80040e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c32:	4824      	ldr	r0, [pc, #144]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x664>)
 8001c34:	f002 fa56 	bl	80040e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, u1_k);
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x638>)
 8001c3a:	e045      	b.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x668>
 8001c3c:	f3af 8000 	nop.w
 8001c40:	ea0190fa 	.word	0xea0190fa
 8001c44:	3f343617 	.word	0x3f343617
 8001c48:	8c550d79 	.word	0x8c550d79
 8001c4c:	3f33f14e 	.word	0x3f33f14e
 8001c50:	7ef9db23 	.word	0x7ef9db23
 8001c54:	3ffebc6a 	.word	0x3ffebc6a
 8001c58:	02de00d2 	.word	0x02de00d2
 8001c5c:	3fed8a09 	.word	0x3fed8a09
 8001c60:	200003f0 	.word	0x200003f0
 8001c64:	20000388 	.word	0x20000388
 8001c68:	20000390 	.word	0x20000390
 8001c6c:	200003d0 	.word	0x200003d0
 8001c70:	200003d8 	.word	0x200003d8
 8001c74:	200003b8 	.word	0x200003b8
 8001c78:	20000010 	.word	0x20000010
 8001c7c:	20000398 	.word	0x20000398
 8001c80:	200003f8 	.word	0x200003f8
 8001c84:	20000380 	.word	0x20000380
 8001c88:	200003e0 	.word	0x200003e0
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	200003e8 	.word	0x200003e8
 8001c94:	20000408 	.word	0x20000408
 8001c98:	20000400 	.word	0x20000400
 8001c9c:	20000370 	.word	0x20000370
 8001ca0:	20000378 	.word	0x20000378
 8001ca4:	20000368 	.word	0x20000368
 8001ca8:	200003a0 	.word	0x200003a0
 8001cac:	200003a8 	.word	0x200003a8
 8001cb0:	200003c0 	.word	0x200003c0
 8001cb4:	200003c8 	.word	0x200003c8
 8001cb8:	200003b0 	.word	0x200003b0
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	40590000 	.word	0x40590000
 8001cc4:	40020400 	.word	0x40020400
 8001cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ccc:	4920      	ldr	r1, [pc, #128]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001cce:	680c      	ldr	r4, [r1, #0]
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	f7fe fef6 	bl	8000ac4 <__aeabi_d2uiz>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	6363      	str	r3, [r4, #52]	; 0x34
 8001cdc:	e057      	b.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0x72e>
		}
		else if(u1_k < 0)
 8001cde:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001ce0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	f7fe fe9a 	bl	8000a24 <__aeabi_dcmplt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d034      	beq.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x700>
		{
			if(u1_k < -100) u1_k = -100;
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001cf8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001d02:	f7fe fe8f 	bl	8000a24 <__aeabi_dcmplt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d005      	beq.n	8001d18 <HAL_TIM_PeriodElapsedCallback+0x6b8>
 8001d0c:	4911      	ldr	r1, [pc, #68]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6f8>)
 8001d14:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_11,GPIO_PIN_SET); //inverse
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1e:	480f      	ldr	r0, [pc, #60]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001d20:	f002 f9e0 	bl	80040e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2a:	480c      	ldr	r0, [pc, #48]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6fc>)
 8001d2c:	f002 f9da 	bl	80040e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, -u1_k);
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x6f4>)
 8001d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d36:	61ba      	str	r2, [r7, #24]
 8001d38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001d3c:	61fb      	str	r3, [r7, #28]
 8001d3e:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d40:	681c      	ldr	r4, [r3, #0]
 8001d42:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d46:	f7fe febd 	bl	8000ac4 <__aeabi_d2uiz>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8001d4e:	e01e      	b.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0x72e>
 8001d50:	20000174 	.word	0x20000174
 8001d54:	20000400 	.word	0x20000400
 8001d58:	c0590000 	.word	0xc0590000
 8001d5c:	40020400 	.word	0x40020400
		}
		else if(u1_k == 0)
 8001d60:	4bb9      	ldr	r3, [pc, #740]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8001d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	f7fe fe4f 	bl	8000a10 <__aeabi_dcmpeq>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00a      	beq.n	8001d8e <HAL_TIM_PeriodElapsedCallback+0x72e>
		{
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, u1_k);
 8001d78:	4bb3      	ldr	r3, [pc, #716]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	49b3      	ldr	r1, [pc, #716]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8001d80:	680c      	ldr	r4, [r1, #0]
 8001d82:	4610      	mov	r0, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	f7fe fe9d 	bl	8000ac4 <__aeabi_d2uiz>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	6363      	str	r3, [r4, #52]	; 0x34
//
//		}else u1_k = 0;


		/* ----------Dong co phai (dong co 2)------------- */
		cnt_encoder2 = __HAL_TIM_GET_COUNTER(&htim4);
 8001d8e:	4bb0      	ldr	r3, [pc, #704]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fb59 	bl	800044c <__aeabi_ui2d>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	49ad      	ldr	r1, [pc, #692]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001da0:	e9c1 2300 	strd	r2, r3, [r1]
		if(abs((int)(cnt_encoder2-pre_cnt_encoder2))<13200) motor2Velocity2 = (cnt_encoder2-pre_cnt_encoder2)*60.0*100/1320;
 8001da4:	4bab      	ldr	r3, [pc, #684]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001daa:	4bab      	ldr	r3, [pc, #684]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db0:	f7fe fa0e 	bl	80001d0 <__aeabi_dsub>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fe5a 	bl	8000a74 <__aeabi_d2iz>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4aa6      	ldr	r2, [pc, #664]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	db3a      	blt.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x7de>
 8001dc8:	4ba2      	ldr	r3, [pc, #648]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dce:	4ba2      	ldr	r3, [pc, #648]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	f7fe f9fc 	bl	80001d0 <__aeabi_dsub>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	460b      	mov	r3, r1
 8001ddc:	4610      	mov	r0, r2
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7fe fe48 	bl	8000a74 <__aeabi_d2iz>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f243 328f 	movw	r2, #13199	; 0x338f
 8001dea:	4293      	cmp	r3, r2
 8001dec:	dc27      	bgt.n	8001e3e <HAL_TIM_PeriodElapsedCallback+0x7de>
 8001dee:	4b99      	ldr	r3, [pc, #612]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df4:	4b98      	ldr	r3, [pc, #608]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfa:	f7fe f9e9 	bl	80001d0 <__aeabi_dsub>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	4b95      	ldr	r3, [pc, #596]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8001e0c:	f7fe fb98 	bl	8000540 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	4b91      	ldr	r3, [pc, #580]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001e1e:	f7fe fb8f 	bl	8000540 <__aeabi_dmul>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b8e      	ldr	r3, [pc, #568]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8001e30:	f7fe fcb0 	bl	8000794 <__aeabi_ddiv>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	498c      	ldr	r1, [pc, #560]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001e3a:	e9c1 2300 	strd	r2, r3, [r1]
		motor2Velocity = 0.9753*motor2Velocity1 + 0.02469*motor2Velocity3; //Bộ l�?c thông thấp
 8001e3e:	4b8c      	ldr	r3, [pc, #560]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001e40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e44:	a372      	add	r3, pc, #456	; (adr r3, 8002010 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fb79 	bl	8000540 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4614      	mov	r4, r2
 8001e54:	461d      	mov	r5, r3
 8001e56:	4b87      	ldr	r3, [pc, #540]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5c:	a36e      	add	r3, pc, #440	; (adr r3, 8002018 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fb6d 	bl	8000540 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe f9b1 	bl	80001d4 <__adddf3>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4980      	ldr	r1, [pc, #512]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001e78:	e9c1 2300 	strd	r2, r3, [r1]
		motor2Velocity1 = motor2Velocity; //y(k-1) = y(k)
 8001e7c:	4b7e      	ldr	r3, [pc, #504]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	497b      	ldr	r1, [pc, #492]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8001e84:	e9c1 2300 	strd	r2, r3, [r1]
		motor2Velocity3 = motor2Velocity2; // y(k-3) = y(k-2);
 8001e88:	4b78      	ldr	r3, [pc, #480]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8e:	4979      	ldr	r1, [pc, #484]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8001e90:	e9c1 2300 	strd	r2, r3, [r1]
		pre_cnt_encoder2 = cnt_encoder2;
 8001e94:	4b6f      	ldr	r3, [pc, #444]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	496f      	ldr	r1, [pc, #444]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001e9c:	e9c1 2300 	strd	r2, r3, [r1]

		e2_c = setpoint2 - motor2Velocity; //Sai số giữa sai số tốc độ đặt và tốc độ thực tế
 8001ea0:	4b76      	ldr	r3, [pc, #472]	; (800207c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe fae1 	bl	800046c <__aeabi_i2d>
 8001eaa:	4b73      	ldr	r3, [pc, #460]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb0:	f7fe f98e 	bl	80001d0 <__aeabi_dsub>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	4971      	ldr	r1, [pc, #452]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0xa20>)
 8001eba:	e9c1 2300 	strd	r2, r3, [r1]

		motor2Velocity_m = 1.921*motor2Velocity1_m - 0.9231*motor2Velocity2_m + 0.001217*setpoint2 + 0.001185*setpoint2; // Ngõ ra của mô hình chuẩn
 8001ebe:	4b71      	ldr	r3, [pc, #452]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8001ec0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ec4:	a356      	add	r3, pc, #344	; (adr r3, 8002020 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb39 	bl	8000540 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4614      	mov	r4, r2
 8001ed4:	461d      	mov	r5, r3
 8001ed6:	4b6c      	ldr	r3, [pc, #432]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0xa28>)
 8001ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001edc:	a352      	add	r3, pc, #328	; (adr r3, 8002028 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb2d 	bl	8000540 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4620      	mov	r0, r4
 8001eec:	4629      	mov	r1, r5
 8001eee:	f7fe f96f 	bl	80001d0 <__aeabi_dsub>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4614      	mov	r4, r2
 8001ef8:	461d      	mov	r5, r3
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fab4 	bl	800046c <__aeabi_i2d>
 8001f04:	a34a      	add	r3, pc, #296	; (adr r3, 8002030 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe fb19 	bl	8000540 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe f95d 	bl	80001d4 <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4614      	mov	r4, r2
 8001f20:	461d      	mov	r5, r3
 8001f22:	4b56      	ldr	r3, [pc, #344]	; (800207c <HAL_TIM_PeriodElapsedCallback+0xa1c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe faa0 	bl	800046c <__aeabi_i2d>
 8001f2c:	a342      	add	r3, pc, #264	; (adr r3, 8002038 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb05 	bl	8000540 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	f7fe f949 	bl	80001d4 <__adddf3>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4951      	ldr	r1, [pc, #324]	; (800208c <HAL_TIM_PeriodElapsedCallback+0xa2c>)
 8001f48:	e9c1 2300 	strd	r2, r3, [r1]
		e2_m = motor2Velocity - motor2Velocity1_m; //Sai số giữa tốc độ của đối tượng động cơ DC và tốc độ theo mô hình chuẩn
 8001f4c:	4b4a      	ldr	r3, [pc, #296]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8001f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f52:	4b4c      	ldr	r3, [pc, #304]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0xa24>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe f93a 	bl	80001d0 <__aeabi_dsub>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	494b      	ldr	r1, [pc, #300]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8001f62:	e9c1 2300 	strd	r2, r3, [r1]


		delta2_Kp = 0.1225*e2_c1 - 0.1225*e2_c2  + 1.921*delta2_Kp_k1 - 0.9231*delta2_Kp_k2;
 8001f66:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0xa34>)
 8001f68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6c:	a334      	add	r3, pc, #208	; (adr r3, 8002040 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fae5 	bl	8000540 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4614      	mov	r4, r2
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8001f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f84:	a32e      	add	r3, pc, #184	; (adr r3, 8002040 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8a:	f7fe fad9 	bl	8000540 <__aeabi_dmul>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	4620      	mov	r0, r4
 8001f94:	4629      	mov	r1, r5
 8001f96:	f7fe f91b 	bl	80001d0 <__aeabi_dsub>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4614      	mov	r4, r2
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	4b3e      	ldr	r3, [pc, #248]	; (800209c <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8001fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fa8:	a31d      	add	r3, pc, #116	; (adr r3, 8002020 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fae:	f7fe fac7 	bl	8000540 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe f90b 	bl	80001d4 <__adddf3>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4614      	mov	r4, r2
 8001fc4:	461d      	mov	r5, r3
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8001fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fcc:	a316      	add	r3, pc, #88	; (adr r3, 8002028 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fab5 	bl	8000540 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4620      	mov	r0, r4
 8001fdc:	4629      	mov	r1, r5
 8001fde:	f7fe f8f7 	bl	80001d0 <__aeabi_dsub>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	492f      	ldr	r1, [pc, #188]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8001fe8:	e9c1 2300 	strd	r2, r3, [r1]
		Kp2 += -gamma2*e2_m*delta2_Kp;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8001fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff2:	613a      	str	r2, [r7, #16]
 8001ff4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001ff8:	617b      	str	r3, [r7, #20]
 8001ffa:	4b25      	ldr	r3, [pc, #148]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0xa30>)
 8001ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002000:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002004:	f7fe fa9c 	bl	8000540 <__aeabi_dmul>
 8002008:	e050      	b.n	80020ac <HAL_TIM_PeriodElapsedCallback+0xa4c>
 800200a:	bf00      	nop
 800200c:	f3af 8000 	nop.w
 8002010:	58793dd9 	.word	0x58793dd9
 8002014:	3fef35a8 	.word	0x3fef35a8
 8002018:	da272863 	.word	0xda272863
 800201c:	3f994855 	.word	0x3f994855
 8002020:	7ef9db23 	.word	0x7ef9db23
 8002024:	3ffebc6a 	.word	0x3ffebc6a
 8002028:	02de00d2 	.word	0x02de00d2
 800202c:	3fed8a09 	.word	0x3fed8a09
 8002030:	ccc03793 	.word	0xccc03793
 8002034:	3f53f077 	.word	0x3f53f077
 8002038:	0fba8827 	.word	0x0fba8827
 800203c:	3f536a40 	.word	0x3f536a40
 8002040:	f5c28f5c 	.word	0xf5c28f5c
 8002044:	3fbf5c28 	.word	0x3fbf5c28
 8002048:	20000400 	.word	0x20000400
 800204c:	20000174 	.word	0x20000174
 8002050:	2000009c 	.word	0x2000009c
 8002054:	20000418 	.word	0x20000418
 8002058:	20000420 	.word	0x20000420
 800205c:	ffffcc71 	.word	0xffffcc71
 8002060:	404e0000 	.word	0x404e0000
 8002064:	40590000 	.word	0x40590000
 8002068:	4094a000 	.word	0x4094a000
 800206c:	20000438 	.word	0x20000438
 8002070:	20000430 	.word	0x20000430
 8002074:	20000440 	.word	0x20000440
 8002078:	20000428 	.word	0x20000428
 800207c:	20000018 	.word	0x20000018
 8002080:	20000460 	.word	0x20000460
 8002084:	20000450 	.word	0x20000450
 8002088:	20000458 	.word	0x20000458
 800208c:	20000448 	.word	0x20000448
 8002090:	20000478 	.word	0x20000478
 8002094:	20000468 	.word	0x20000468
 8002098:	20000470 	.word	0x20000470
 800209c:	200004a0 	.word	0x200004a0
 80020a0:	200004a8 	.word	0x200004a8
 80020a4:	20000490 	.word	0x20000490
 80020a8:	20000020 	.word	0x20000020
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	4610      	mov	r0, r2
 80020b2:	4619      	mov	r1, r3
 80020b4:	4ba6      	ldr	r3, [pc, #664]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	f7fe fa41 	bl	8000540 <__aeabi_dmul>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	4ba3      	ldr	r3, [pc, #652]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 80020c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020cc:	f7fe f882 	bl	80001d4 <__adddf3>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	499f      	ldr	r1, [pc, #636]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 80020d6:	e9c1 2300 	strd	r2, r3, [r1]
		delta2_Ki = 0.0003084*e2_c1 + 0.0003043*e2_c2 + 1.921*delta2_Ki_k1 - 0.9231*delta2_Ki_k2;
 80020da:	4b9f      	ldr	r3, [pc, #636]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 80020dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020e0:	a393      	add	r3, pc, #588	; (adr r3, 8002330 <HAL_TIM_PeriodElapsedCallback+0xcd0>)
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f7fe fa2b 	bl	8000540 <__aeabi_dmul>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4614      	mov	r4, r2
 80020f0:	461d      	mov	r5, r3
 80020f2:	4b9a      	ldr	r3, [pc, #616]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	a38f      	add	r3, pc, #572	; (adr r3, 8002338 <HAL_TIM_PeriodElapsedCallback+0xcd8>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa1f 	bl	8000540 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4620      	mov	r0, r4
 8002108:	4629      	mov	r1, r5
 800210a:	f7fe f863 	bl	80001d4 <__adddf3>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4614      	mov	r4, r2
 8002114:	461d      	mov	r5, r3
 8002116:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 8002118:	e9d3 0100 	ldrd	r0, r1, [r3]
 800211c:	a388      	add	r3, pc, #544	; (adr r3, 8002340 <HAL_TIM_PeriodElapsedCallback+0xce0>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fa0d 	bl	8000540 <__aeabi_dmul>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4620      	mov	r0, r4
 800212c:	4629      	mov	r1, r5
 800212e:	f7fe f851 	bl	80001d4 <__adddf3>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4614      	mov	r4, r2
 8002138:	461d      	mov	r5, r3
 800213a:	4b8a      	ldr	r3, [pc, #552]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 800213c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002140:	a381      	add	r3, pc, #516	; (adr r3, 8002348 <HAL_TIM_PeriodElapsedCallback+0xce8>)
 8002142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002146:	f7fe f9fb 	bl	8000540 <__aeabi_dmul>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4620      	mov	r0, r4
 8002150:	4629      	mov	r1, r5
 8002152:	f7fe f83d 	bl	80001d0 <__aeabi_dsub>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4983      	ldr	r1, [pc, #524]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 800215c:	e9c1 2300 	strd	r2, r3, [r1]
		Ki2 += -gamma2*e2_m*delta2_Ki;
 8002160:	4b82      	ldr	r3, [pc, #520]	; (800236c <HAL_TIM_PeriodElapsedCallback+0xd0c>)
 8002162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002166:	60ba      	str	r2, [r7, #8]
 8002168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002178:	f7fe f9e2 	bl	8000540 <__aeabi_dmul>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4610      	mov	r0, r2
 8002182:	4619      	mov	r1, r3
 8002184:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 8002186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218a:	f7fe f9d9 	bl	8000540 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	4b77      	ldr	r3, [pc, #476]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 8002198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219c:	f7fe f81a 	bl	80001d4 <__adddf3>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	4973      	ldr	r1, [pc, #460]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 80021a6:	e9c1 2300 	strd	r2, r3, [r1]

		alpha2 = Kp2*(e2_c-e2_c1);
 80021aa:	4b73      	ldr	r3, [pc, #460]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 80021ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b0:	4b69      	ldr	r3, [pc, #420]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f7fe f80b 	bl	80001d0 <__aeabi_dsub>
 80021ba:	4602      	mov	r2, r0
 80021bc:	460b      	mov	r3, r1
 80021be:	4610      	mov	r0, r2
 80021c0:	4619      	mov	r1, r3
 80021c2:	4b64      	ldr	r3, [pc, #400]	; (8002354 <HAL_TIM_PeriodElapsedCallback+0xcf4>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe f9ba 	bl	8000540 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	496a      	ldr	r1, [pc, #424]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 80021d2:	e9c1 2300 	strd	r2, r3, [r1]
		beta2 = time_sample/2*Ki2*(e2_c+e2_c1);
 80021d6:	4b6a      	ldr	r3, [pc, #424]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0xd20>)
 80021d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021e4:	f7fe fad6 	bl	8000794 <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	4b60      	ldr	r3, [pc, #384]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0xd14>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe f9a3 	bl	8000540 <__aeabi_dmul>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4614      	mov	r4, r2
 8002200:	461d      	mov	r5, r3
 8002202:	4b5d      	ldr	r3, [pc, #372]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 8002204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002208:	4b53      	ldr	r3, [pc, #332]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fd ffe1 	bl	80001d4 <__adddf3>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4620      	mov	r0, r4
 8002218:	4629      	mov	r1, r5
 800221a:	f7fe f991 	bl	8000540 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4958      	ldr	r1, [pc, #352]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002224:	e9c1 2300 	strd	r2, r3, [r1]
		u2_k = u2_k1 + alpha2 + beta2;
 8002228:	4b57      	ldr	r3, [pc, #348]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 800222a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800222e:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_TIM_PeriodElapsedCallback+0xd1c>)
 8002230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002234:	f7fd ffce 	bl	80001d4 <__adddf3>
 8002238:	4602      	mov	r2, r0
 800223a:	460b      	mov	r3, r1
 800223c:	4610      	mov	r0, r2
 800223e:	4619      	mov	r1, r3
 8002240:	4b50      	ldr	r3, [pc, #320]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0xd24>)
 8002242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002246:	f7fd ffc5 	bl	80001d4 <__adddf3>
 800224a:	4602      	mov	r2, r0
 800224c:	460b      	mov	r3, r1
 800224e:	494f      	ldr	r1, [pc, #316]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002250:	e9c1 2300 	strd	r2, r3, [r1]

		motor2Velocity2_m = motor2Velocity1_m; //ym(k-2) = ym(k-1);
 8002254:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225a:	494e      	ldr	r1, [pc, #312]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0xd34>)
 800225c:	e9c1 2300 	strd	r2, r3, [r1]
		motor2Velocity1_m = motor2Velocity_m; //ym(k-1) = ym(k);
 8002260:	4b4d      	ldr	r3, [pc, #308]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0xd38>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	494a      	ldr	r1, [pc, #296]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0xd30>)
 8002268:	e9c1 2300 	strd	r2, r3, [r1]

		e2_c2 = e2_c1; //e(k-2) = e(k-1)
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 800226e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002272:	493a      	ldr	r1, [pc, #232]	; (800235c <HAL_TIM_PeriodElapsedCallback+0xcfc>)
 8002274:	e9c1 2300 	strd	r2, r3, [r1]
		e2_c1 = e2_c; //e(k-1) = e(k);
 8002278:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0xd18>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	4936      	ldr	r1, [pc, #216]	; (8002358 <HAL_TIM_PeriodElapsedCallback+0xcf8>)
 8002280:	e9c1 2300 	strd	r2, r3, [r1]

		e2_m2 = e2_m1; //em(k-2) = em(k-1);
 8002284:	4b45      	ldr	r3, [pc, #276]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	4945      	ldr	r1, [pc, #276]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0xd40>)
 800228c:	e9c1 2300 	strd	r2, r3, [r1]
		e2_m1 = e2_m; //em(k-1) = em(k);
 8002290:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_TIM_PeriodElapsedCallback+0xd10>)
 8002292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002296:	4941      	ldr	r1, [pc, #260]	; (800239c <HAL_TIM_PeriodElapsedCallback+0xd3c>)
 8002298:	e9c1 2300 	strd	r2, r3, [r1]

		delta2_Kp_k2 = delta2_Kp_k1; // delKp(k-2) = delKp(k-1);
 800229c:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 800229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a2:	4941      	ldr	r1, [pc, #260]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0xd48>)
 80022a4:	e9c1 2300 	strd	r2, r3, [r1]
		delta2_Kp_k1 = delta2_Kp;
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0xcf0>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	493d      	ldr	r1, [pc, #244]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0xd44>)
 80022b0:	e9c1 2300 	strd	r2, r3, [r1]

		delta2_Ki_k2 = delta2_Ki_k1;
 80022b4:	4b2a      	ldr	r3, [pc, #168]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 80022b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ba:	492a      	ldr	r1, [pc, #168]	; (8002364 <HAL_TIM_PeriodElapsedCallback+0xd04>)
 80022bc:	e9c1 2300 	strd	r2, r3, [r1]
		delta2_Ki_k1 = delta2_Ki;
 80022c0:	4b29      	ldr	r3, [pc, #164]	; (8002368 <HAL_TIM_PeriodElapsedCallback+0xd08>)
 80022c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c6:	4926      	ldr	r1, [pc, #152]	; (8002360 <HAL_TIM_PeriodElapsedCallback+0xd00>)
 80022c8:	e9c1 2300 	strd	r2, r3, [r1]

		u2_k1 = u2_k;
 80022cc:	4b2f      	ldr	r3, [pc, #188]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 80022ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d2:	492d      	ldr	r1, [pc, #180]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0xd28>)
 80022d4:	e9c1 2300 	strd	r2, r3, [r1]

		//Thêm khâu bão hòa
		if(setpoint2 == 0) u2_k = 0;
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0xd4c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <HAL_TIM_PeriodElapsedCallback+0xc8e>
 80022e0:	492a      	ldr	r1, [pc, #168]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 80022e2:	f04f 0200 	mov.w	r2, #0
 80022e6:	f04f 0300 	mov.w	r3, #0
 80022ea:	e9c1 2300 	strd	r2, r3, [r1]
		if(u2_k < 0)
 80022ee:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 80022f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	f7fe fb92 	bl	8000a24 <__aeabi_dcmplt>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d072      	beq.n	80023ec <HAL_TIM_PeriodElapsedCallback+0xd8c>
		{
			if(u2_k < -100) u2_k = -100;
 8002306:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 8002308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002312:	f7fe fb87 	bl	8000a24 <__aeabi_dcmplt>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d04b      	beq.n	80023b4 <HAL_TIM_PeriodElapsedCallback+0xd54>
 800231c:	491b      	ldr	r1, [pc, #108]	; (800238c <HAL_TIM_PeriodElapsedCallback+0xd2c>)
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0xd50>)
 8002324:	e9c1 2300 	strd	r2, r3, [r1]
 8002328:	e044      	b.n	80023b4 <HAL_TIM_PeriodElapsedCallback+0xd54>
 800232a:	bf00      	nop
 800232c:	f3af 8000 	nop.w
 8002330:	ea0190fa 	.word	0xea0190fa
 8002334:	3f343617 	.word	0x3f343617
 8002338:	8c550d79 	.word	0x8c550d79
 800233c:	3f33f14e 	.word	0x3f33f14e
 8002340:	7ef9db23 	.word	0x7ef9db23
 8002344:	3ffebc6a 	.word	0x3ffebc6a
 8002348:	02de00d2 	.word	0x02de00d2
 800234c:	3fed8a09 	.word	0x3fed8a09
 8002350:	20000490 	.word	0x20000490
 8002354:	200004d0 	.word	0x200004d0
 8002358:	20000468 	.word	0x20000468
 800235c:	20000470 	.word	0x20000470
 8002360:	200004b0 	.word	0x200004b0
 8002364:	200004b8 	.word	0x200004b8
 8002368:	20000498 	.word	0x20000498
 800236c:	20000020 	.word	0x20000020
 8002370:	20000478 	.word	0x20000478
 8002374:	200004d8 	.word	0x200004d8
 8002378:	20000460 	.word	0x20000460
 800237c:	200004c0 	.word	0x200004c0
 8002380:	20000000 	.word	0x20000000
 8002384:	200004c8 	.word	0x200004c8
 8002388:	200004e8 	.word	0x200004e8
 800238c:	200004e0 	.word	0x200004e0
 8002390:	20000450 	.word	0x20000450
 8002394:	20000458 	.word	0x20000458
 8002398:	20000448 	.word	0x20000448
 800239c:	20000480 	.word	0x20000480
 80023a0:	20000488 	.word	0x20000488
 80023a4:	200004a0 	.word	0x200004a0
 80023a8:	200004a8 	.word	0x200004a8
 80023ac:	20000018 	.word	0x20000018
 80023b0:	c0590000 	.word	0xc0590000
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_RESET); //INVERSE
 80023b4:	2200      	movs	r2, #0
 80023b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ba:	4899      	ldr	r0, [pc, #612]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 80023bc:	f001 fe92 	bl	80040e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_SET);
 80023c0:	2201      	movs	r2, #1
 80023c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023c6:	4896      	ldr	r0, [pc, #600]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 80023c8:	f001 fe8c 	bl	80040e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, -u2_k);
 80023cc:	4b95      	ldr	r3, [pc, #596]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 80023ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d2:	603a      	str	r2, [r7, #0]
 80023d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	4b93      	ldr	r3, [pc, #588]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80023dc:	681c      	ldr	r4, [r3, #0]
 80023de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80023e2:	f7fe fb6f 	bl	8000ac4 <__aeabi_d2uiz>
 80023e6:	4603      	mov	r3, r0
 80023e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80023ea:	e04b      	b.n	8002484 <HAL_TIM_PeriodElapsedCallback+0xe24>
		}
		else if(u2_k >=0)
 80023ec:	4b8d      	ldr	r3, [pc, #564]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 80023ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	f7fe fb27 	bl	8000a4c <__aeabi_dcmpge>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d028      	beq.n	8002456 <HAL_TIM_PeriodElapsedCallback+0xdf6>
		{
			if(u2_k > 100) u2_k = 100;
 8002404:	4b87      	ldr	r3, [pc, #540]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8002406:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b87      	ldr	r3, [pc, #540]	; (800262c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8002410:	f7fe fb26 	bl	8000a60 <__aeabi_dcmpgt>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <HAL_TIM_PeriodElapsedCallback+0xdc6>
 800241a:	4982      	ldr	r1, [pc, #520]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	4b82      	ldr	r3, [pc, #520]	; (800262c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8002422:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_10,GPIO_PIN_SET); //FORWARD
 8002426:	2201      	movs	r2, #1
 8002428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800242c:	487c      	ldr	r0, [pc, #496]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 800242e:	f001 fe59 	bl	80040e4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_11,GPIO_PIN_RESET);
 8002432:	2200      	movs	r2, #0
 8002434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002438:	4879      	ldr	r0, [pc, #484]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 800243a:	f001 fe53 	bl	80040e4 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, u2_k); //PC7 banh phai
 800243e:	4b79      	ldr	r3, [pc, #484]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	4978      	ldr	r1, [pc, #480]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8002446:	680c      	ldr	r4, [r1, #0]
 8002448:	4610      	mov	r0, r2
 800244a:	4619      	mov	r1, r3
 800244c:	f7fe fb3a 	bl	8000ac4 <__aeabi_d2uiz>
 8002450:	4603      	mov	r3, r0
 8002452:	63a3      	str	r3, [r4, #56]	; 0x38
 8002454:	e016      	b.n	8002484 <HAL_TIM_PeriodElapsedCallback+0xe24>
		}
		else if(u2_k == 0)
 8002456:	4b73      	ldr	r3, [pc, #460]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8002458:	e9d3 0100 	ldrd	r0, r1, [r3]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	f7fe fad4 	bl	8000a10 <__aeabi_dcmpeq>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d00a      	beq.n	8002484 <HAL_TIM_PeriodElapsedCallback+0xe24>
		{
			__HAL_TIM_SET_COMPARE(&htim8,TIM_CHANNEL_2,u2_k);
 800246e:	4b6d      	ldr	r3, [pc, #436]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8002470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002474:	496c      	ldr	r1, [pc, #432]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8002476:	680c      	ldr	r4, [r1, #0]
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fb22 	bl	8000ac4 <__aeabi_d2uiz>
 8002480:	4603      	mov	r3, r0
 8002482:	63a3      	str	r3, [r4, #56]	; 0x38

		// Truyen du lieu UART frame truyen +000.00/+000.00/n  +120.00 45.00 -50.00
		//Truyen hang tram
		int16_t left_temp,right_temp;
		int32_t setpoint1_temp, setpoint2_temp;
		if(motor1Velocity1 >= 0)
 8002484:	4b6a      	ldr	r3, [pc, #424]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8002486:	e9d3 0100 	ldrd	r0, r1, [r3]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	f7fe fadb 	bl	8000a4c <__aeabi_dcmpge>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_TIM_PeriodElapsedCallback+0xe64>
		{
			left_temp = 100*motor1Velocity1;
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 800249e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	4b61      	ldr	r3, [pc, #388]	; (800262c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 80024a8:	f7fe f84a 	bl	8000540 <__aeabi_dmul>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4610      	mov	r0, r2
 80024b2:	4619      	mov	r1, r3
 80024b4:	f7fe fade 	bl	8000a74 <__aeabi_d2iz>
 80024b8:	4603      	mov	r3, r0
 80024ba:	86fb      	strh	r3, [r7, #54]	; 0x36
			y[0] = '+';
 80024bc:	4b5d      	ldr	r3, [pc, #372]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80024be:	222b      	movs	r2, #43	; 0x2b
 80024c0:	701a      	strb	r2, [r3, #0]
 80024c2:	e012      	b.n	80024ea <HAL_TIM_PeriodElapsedCallback+0xe8a>
		}
		else
		{
			left_temp = -100*motor1Velocity1;
 80024c4:	4b5a      	ldr	r3, [pc, #360]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 80024c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	4b5a      	ldr	r3, [pc, #360]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 80024d0:	f7fe f836 	bl	8000540 <__aeabi_dmul>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4610      	mov	r0, r2
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fe faca 	bl	8000a74 <__aeabi_d2iz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	86fb      	strh	r3, [r7, #54]	; 0x36
			y[0] = '-';
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80024e6:	222d      	movs	r2, #45	; 0x2d
 80024e8:	701a      	strb	r2, [r3, #0]
		}
		y[1] = left_temp/10000 + 48;
 80024ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80024ee:	4a53      	ldr	r2, [pc, #332]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 80024f0:	fb82 1203 	smull	r1, r2, r2, r3
 80024f4:	1312      	asrs	r2, r2, #12
 80024f6:	17db      	asrs	r3, r3, #31
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	b21b      	sxth	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3330      	adds	r3, #48	; 0x30
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b4c      	ldr	r3, [pc, #304]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8002504:	705a      	strb	r2, [r3, #1]
		left_temp %= 10000;
 8002506:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800250a:	4a4c      	ldr	r2, [pc, #304]	; (800263c <HAL_TIM_PeriodElapsedCallback+0xfdc>)
 800250c:	fb82 1203 	smull	r1, r2, r2, r3
 8002510:	1311      	asrs	r1, r2, #12
 8002512:	17da      	asrs	r2, r3, #31
 8002514:	1a8a      	subs	r2, r1, r2
 8002516:	f242 7110 	movw	r1, #10000	; 0x2710
 800251a:	fb01 f202 	mul.w	r2, r1, r2
 800251e:	1a9b      	subs	r3, r3, r2
 8002520:	86fb      	strh	r3, [r7, #54]	; 0x36
		y[2] = left_temp/1000 + 48;
 8002522:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002526:	4a46      	ldr	r2, [pc, #280]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8002528:	fb82 1203 	smull	r1, r2, r2, r3
 800252c:	1192      	asrs	r2, r2, #6
 800252e:	17db      	asrs	r3, r3, #31
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	b21b      	sxth	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	3330      	adds	r3, #48	; 0x30
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4b3e      	ldr	r3, [pc, #248]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800253c:	709a      	strb	r2, [r3, #2]
		left_temp %= 1000;
 800253e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002542:	4a3f      	ldr	r2, [pc, #252]	; (8002640 <HAL_TIM_PeriodElapsedCallback+0xfe0>)
 8002544:	fb82 1203 	smull	r1, r2, r2, r3
 8002548:	1191      	asrs	r1, r2, #6
 800254a:	17da      	asrs	r2, r3, #31
 800254c:	1a8a      	subs	r2, r1, r2
 800254e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002552:	fb01 f202 	mul.w	r2, r1, r2
 8002556:	1a9b      	subs	r3, r3, r2
 8002558:	86fb      	strh	r3, [r7, #54]	; 0x36
		y[3] = left_temp/100 + 48;
 800255a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800255e:	4a39      	ldr	r2, [pc, #228]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 8002560:	fb82 1203 	smull	r1, r2, r2, r3
 8002564:	1152      	asrs	r2, r2, #5
 8002566:	17db      	asrs	r3, r3, #31
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b21b      	sxth	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3330      	adds	r3, #48	; 0x30
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8002574:	70da      	strb	r2, [r3, #3]
		left_temp %= 100;
 8002576:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800257a:	4a32      	ldr	r2, [pc, #200]	; (8002644 <HAL_TIM_PeriodElapsedCallback+0xfe4>)
 800257c:	fb82 1203 	smull	r1, r2, r2, r3
 8002580:	1151      	asrs	r1, r2, #5
 8002582:	17da      	asrs	r2, r3, #31
 8002584:	1a8a      	subs	r2, r1, r2
 8002586:	2164      	movs	r1, #100	; 0x64
 8002588:	fb01 f202 	mul.w	r2, r1, r2
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	86fb      	strh	r3, [r7, #54]	; 0x36
		y[4] = 0x2E;
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8002592:	222e      	movs	r2, #46	; 0x2e
 8002594:	711a      	strb	r2, [r3, #4]
		y[5] = left_temp/10 + 48;
 8002596:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800259a:	4a2b      	ldr	r2, [pc, #172]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 800259c:	fb82 1203 	smull	r1, r2, r2, r3
 80025a0:	1092      	asrs	r2, r2, #2
 80025a2:	17db      	asrs	r3, r3, #31
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	3330      	adds	r3, #48	; 0x30
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4b21      	ldr	r3, [pc, #132]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80025b0:	715a      	strb	r2, [r3, #5]
		y[6] = left_temp%10 + 48;
 80025b2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_TIM_PeriodElapsedCallback+0xfe8>)
 80025b8:	fb83 1302 	smull	r1, r3, r3, r2
 80025bc:	1099      	asrs	r1, r3, #2
 80025be:	17d3      	asrs	r3, r2, #31
 80025c0:	1ac9      	subs	r1, r1, r3
 80025c2:	460b      	mov	r3, r1
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	b21b      	sxth	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	3330      	adds	r3, #48	; 0x30
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80025d6:	719a      	strb	r2, [r3, #6]
		y[7] = ',' ;
 80025d8:	4b16      	ldr	r3, [pc, #88]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80025da:	222c      	movs	r2, #44	; 0x2c
 80025dc:	71da      	strb	r2, [r3, #7]

		if(motor2Velocity1 >= 0)
 80025de:	4b1b      	ldr	r3, [pc, #108]	; (800264c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	f04f 0200 	mov.w	r2, #0
 80025e8:	f04f 0300 	mov.w	r3, #0
 80025ec:	f7fe fa2e 	bl	8000a4c <__aeabi_dcmpge>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d02c      	beq.n	8002650 <HAL_TIM_PeriodElapsedCallback+0xff0>
		{
			right_temp = 100*motor2Velocity1;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <HAL_TIM_PeriodElapsedCallback+0xfec>)
 80025f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8002602:	f7fd ff9d 	bl	8000540 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe fa31 	bl	8000a74 <__aeabi_d2iz>
 8002612:	4603      	mov	r3, r0
 8002614:	86bb      	strh	r3, [r7, #52]	; 0x34
			y[8] = '+';
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8002618:	222b      	movs	r2, #43	; 0x2b
 800261a:	721a      	strb	r2, [r3, #8]
 800261c:	e02b      	b.n	8002676 <HAL_TIM_PeriodElapsedCallback+0x1016>
 800261e:	bf00      	nop
 8002620:	40020800 	.word	0x40020800
 8002624:	200004e0 	.word	0x200004e0
 8002628:	20000174 	.word	0x20000174
 800262c:	40590000 	.word	0x40590000
 8002630:	20000350 	.word	0x20000350
 8002634:	200002fc 	.word	0x200002fc
 8002638:	c0590000 	.word	0xc0590000
 800263c:	68db8bad 	.word	0x68db8bad
 8002640:	10624dd3 	.word	0x10624dd3
 8002644:	51eb851f 	.word	0x51eb851f
 8002648:	66666667 	.word	0x66666667
 800264c:	20000430 	.word	0x20000430
		}
		else
		{
			right_temp = -100*motor2Velocity1;
 8002650:	4b9a      	ldr	r3, [pc, #616]	; (80028bc <HAL_TIM_PeriodElapsedCallback+0x125c>)
 8002652:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	4b99      	ldr	r3, [pc, #612]	; (80028c0 <HAL_TIM_PeriodElapsedCallback+0x1260>)
 800265c:	f7fd ff70 	bl	8000540 <__aeabi_dmul>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	f7fe fa04 	bl	8000a74 <__aeabi_d2iz>
 800266c:	4603      	mov	r3, r0
 800266e:	86bb      	strh	r3, [r7, #52]	; 0x34
			y[8] = '-';
 8002670:	4b94      	ldr	r3, [pc, #592]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002672:	222d      	movs	r2, #45	; 0x2d
 8002674:	721a      	strb	r2, [r3, #8]
		}
		y[9] = right_temp/10000 + 48;
 8002676:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800267a:	4a93      	ldr	r2, [pc, #588]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x1268>)
 800267c:	fb82 1203 	smull	r1, r2, r2, r3
 8002680:	1312      	asrs	r2, r2, #12
 8002682:	17db      	asrs	r3, r3, #31
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	b21b      	sxth	r3, r3
 8002688:	b2db      	uxtb	r3, r3
 800268a:	3330      	adds	r3, #48	; 0x30
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b8d      	ldr	r3, [pc, #564]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002690:	725a      	strb	r2, [r3, #9]
		right_temp %= 10000;
 8002692:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002696:	4a8c      	ldr	r2, [pc, #560]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x1268>)
 8002698:	fb82 1203 	smull	r1, r2, r2, r3
 800269c:	1311      	asrs	r1, r2, #12
 800269e:	17da      	asrs	r2, r3, #31
 80026a0:	1a8a      	subs	r2, r1, r2
 80026a2:	f242 7110 	movw	r1, #10000	; 0x2710
 80026a6:	fb01 f202 	mul.w	r2, r1, r2
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	86bb      	strh	r3, [r7, #52]	; 0x34
		y[10] = right_temp/1000 + 48;
 80026ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80026b2:	4a86      	ldr	r2, [pc, #536]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x126c>)
 80026b4:	fb82 1203 	smull	r1, r2, r2, r3
 80026b8:	1192      	asrs	r2, r2, #6
 80026ba:	17db      	asrs	r3, r3, #31
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	b21b      	sxth	r3, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	3330      	adds	r3, #48	; 0x30
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b7f      	ldr	r3, [pc, #508]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 80026c8:	729a      	strb	r2, [r3, #10]
		right_temp %= 1000;
 80026ca:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80026ce:	4a7f      	ldr	r2, [pc, #508]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x126c>)
 80026d0:	fb82 1203 	smull	r1, r2, r2, r3
 80026d4:	1191      	asrs	r1, r2, #6
 80026d6:	17da      	asrs	r2, r3, #31
 80026d8:	1a8a      	subs	r2, r1, r2
 80026da:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026de:	fb01 f202 	mul.w	r2, r1, r2
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	86bb      	strh	r3, [r7, #52]	; 0x34
		y[11] = right_temp/100 + 48;
 80026e6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80026ea:	4a79      	ldr	r2, [pc, #484]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 80026ec:	fb82 1203 	smull	r1, r2, r2, r3
 80026f0:	1152      	asrs	r2, r2, #5
 80026f2:	17db      	asrs	r3, r3, #31
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	b21b      	sxth	r3, r3
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	3330      	adds	r3, #48	; 0x30
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	4b71      	ldr	r3, [pc, #452]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002700:	72da      	strb	r2, [r3, #11]
		right_temp %= 100;
 8002702:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002706:	4a72      	ldr	r2, [pc, #456]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x1270>)
 8002708:	fb82 1203 	smull	r1, r2, r2, r3
 800270c:	1151      	asrs	r1, r2, #5
 800270e:	17da      	asrs	r2, r3, #31
 8002710:	1a8a      	subs	r2, r1, r2
 8002712:	2164      	movs	r1, #100	; 0x64
 8002714:	fb01 f202 	mul.w	r2, r1, r2
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	86bb      	strh	r3, [r7, #52]	; 0x34
		y[12] = 0x2E;
 800271c:	4b69      	ldr	r3, [pc, #420]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800271e:	222e      	movs	r2, #46	; 0x2e
 8002720:	731a      	strb	r2, [r3, #12]
		y[13] = right_temp/10 + 48;
 8002722:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002726:	4a6b      	ldr	r2, [pc, #428]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 8002728:	fb82 1203 	smull	r1, r2, r2, r3
 800272c:	1092      	asrs	r2, r2, #2
 800272e:	17db      	asrs	r3, r3, #31
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	b21b      	sxth	r3, r3
 8002734:	b2db      	uxtb	r3, r3
 8002736:	3330      	adds	r3, #48	; 0x30
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800273c:	735a      	strb	r2, [r3, #13]
		y[14] = right_temp%10 + 48;
 800273e:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 8002742:	4b64      	ldr	r3, [pc, #400]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 8002744:	fb83 1302 	smull	r1, r3, r3, r2
 8002748:	1099      	asrs	r1, r3, #2
 800274a:	17d3      	asrs	r3, r2, #31
 800274c:	1ac9      	subs	r1, r1, r3
 800274e:	460b      	mov	r3, r1
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	b21b      	sxth	r3, r3
 800275a:	b2db      	uxtb	r3, r3
 800275c:	3330      	adds	r3, #48	; 0x30
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b58      	ldr	r3, [pc, #352]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002762:	739a      	strb	r2, [r3, #14]
		if(setpoint1 > 0 && setpoint2 > 0)
 8002764:	4b5c      	ldr	r3, [pc, #368]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	dd50      	ble.n	800280e <HAL_TIM_PeriodElapsedCallback+0x11ae>
 800276c:	4b5b      	ldr	r3, [pc, #364]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x127c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	dd4c      	ble.n	800280e <HAL_TIM_PeriodElapsedCallback+0x11ae>
		{
			a++;
 8002774:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	4a59      	ldr	r2, [pc, #356]	; (80028e0 <HAL_TIM_PeriodElapsedCallback+0x1280>)
 800277c:	6013      	str	r3, [r2, #0]
			y[15] = '+';
 800277e:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002780:	222b      	movs	r2, #43	; 0x2b
 8002782:	73da      	strb	r2, [r3, #15]
			y[16] = setpoint1/10 + 48;
 8002784:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a52      	ldr	r2, [pc, #328]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800278a:	fb82 1203 	smull	r1, r2, r2, r3
 800278e:	1092      	asrs	r2, r2, #2
 8002790:	17db      	asrs	r3, r3, #31
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	b2db      	uxtb	r3, r3
 8002796:	3330      	adds	r3, #48	; 0x30
 8002798:	b2da      	uxtb	r2, r3
 800279a:	4b4a      	ldr	r3, [pc, #296]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800279c:	741a      	strb	r2, [r3, #16]
			y[17] = setpoint1%10 + 48;
 800279e:	4b4e      	ldr	r3, [pc, #312]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b4c      	ldr	r3, [pc, #304]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 80027a4:	fb83 1302 	smull	r1, r3, r3, r2
 80027a8:	1099      	asrs	r1, r3, #2
 80027aa:	17d3      	asrs	r3, r2, #31
 80027ac:	1ac9      	subs	r1, r1, r3
 80027ae:	460b      	mov	r3, r1
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	1ad1      	subs	r1, r2, r3
 80027b8:	b2cb      	uxtb	r3, r1
 80027ba:	3330      	adds	r3, #48	; 0x30
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 80027c0:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 80027c2:	4b40      	ldr	r3, [pc, #256]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 80027c4:	222c      	movs	r2, #44	; 0x2c
 80027c6:	749a      	strb	r2, [r3, #18]
			y[19] = '+';
 80027c8:	4b3e      	ldr	r3, [pc, #248]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 80027ca:	222b      	movs	r2, #43	; 0x2b
 80027cc:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2/10 + 48;
 80027ce:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x127c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a40      	ldr	r2, [pc, #256]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 80027d4:	fb82 1203 	smull	r1, r2, r2, r3
 80027d8:	1092      	asrs	r2, r2, #2
 80027da:	17db      	asrs	r3, r3, #31
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	3330      	adds	r3, #48	; 0x30
 80027e2:	b2da      	uxtb	r2, r3
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 80027e6:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2%10 + 48;
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x127c>)
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	4b39      	ldr	r3, [pc, #228]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 80027ee:	fb83 1302 	smull	r1, r3, r3, r2
 80027f2:	1099      	asrs	r1, r3, #2
 80027f4:	17d3      	asrs	r3, r2, #31
 80027f6:	1ac9      	subs	r1, r1, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	1ad1      	subs	r1, r2, r3
 8002802:	b2cb      	uxtb	r3, r1
 8002804:	3330      	adds	r3, #48	; 0x30
 8002806:	b2da      	uxtb	r2, r3
 8002808:	4b2e      	ldr	r3, [pc, #184]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800280a:	755a      	strb	r2, [r3, #21]
 800280c:	e25b      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>

		}
		else if(setpoint1 > 0 && setpoint2 < 0)
 800280e:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	dd68      	ble.n	80028e8 <HAL_TIM_PeriodElapsedCallback+0x1288>
 8002816:	4b31      	ldr	r3, [pc, #196]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x127c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	da64      	bge.n	80028e8 <HAL_TIM_PeriodElapsedCallback+0x1288>
		{
			b++;
 800281e:	4b31      	ldr	r3, [pc, #196]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x1284>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	4a2f      	ldr	r2, [pc, #188]	; (80028e4 <HAL_TIM_PeriodElapsedCallback+0x1284>)
 8002826:	6013      	str	r3, [r2, #0]
			setpoint2_temp = -setpoint2;
 8002828:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <HAL_TIM_PeriodElapsedCallback+0x127c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	425b      	negs	r3, r3
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
			y[15] = '+';
 8002830:	4b24      	ldr	r3, [pc, #144]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002832:	222b      	movs	r2, #43	; 0x2b
 8002834:	73da      	strb	r2, [r3, #15]
			y[16] = setpoint1/10 + 48;
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800283c:	fb82 1203 	smull	r1, r2, r2, r3
 8002840:	1092      	asrs	r2, r2, #2
 8002842:	17db      	asrs	r3, r3, #31
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	b2db      	uxtb	r3, r3
 8002848:	3330      	adds	r3, #48	; 0x30
 800284a:	b2da      	uxtb	r2, r3
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800284e:	741a      	strb	r2, [r3, #16]
			y[17] = setpoint1%10 + 48;
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x1278>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b1f      	ldr	r3, [pc, #124]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 8002856:	fb83 1302 	smull	r1, r3, r3, r2
 800285a:	1099      	asrs	r1, r3, #2
 800285c:	17d3      	asrs	r3, r2, #31
 800285e:	1ac9      	subs	r1, r1, r3
 8002860:	460b      	mov	r3, r1
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	1ad1      	subs	r1, r2, r3
 800286a:	b2cb      	uxtb	r3, r1
 800286c:	3330      	adds	r3, #48	; 0x30
 800286e:	b2da      	uxtb	r2, r3
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002872:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002876:	222c      	movs	r2, #44	; 0x2c
 8002878:	749a      	strb	r2, [r3, #18]
			y[19] = '-';
 800287a:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 800287c:	222d      	movs	r2, #45	; 0x2d
 800287e:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2_temp/10 + 48;
 8002880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002882:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 8002884:	fb82 1203 	smull	r1, r2, r2, r3
 8002888:	1092      	asrs	r2, r2, #2
 800288a:	17db      	asrs	r3, r3, #31
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3330      	adds	r3, #48	; 0x30
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 8002896:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2_temp%10 + 48;
 8002898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x1274>)
 800289c:	fb83 1302 	smull	r1, r3, r3, r2
 80028a0:	1099      	asrs	r1, r3, #2
 80028a2:	17d3      	asrs	r3, r2, #31
 80028a4:	1ac9      	subs	r1, r1, r3
 80028a6:	460b      	mov	r3, r1
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	1ad1      	subs	r1, r2, r3
 80028b0:	b2cb      	uxtb	r3, r1
 80028b2:	3330      	adds	r3, #48	; 0x30
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x1264>)
 80028b8:	755a      	strb	r2, [r3, #21]
 80028ba:	e204      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
 80028bc:	20000430 	.word	0x20000430
 80028c0:	c0590000 	.word	0xc0590000
 80028c4:	200002fc 	.word	0x200002fc
 80028c8:	68db8bad 	.word	0x68db8bad
 80028cc:	10624dd3 	.word	0x10624dd3
 80028d0:	51eb851f 	.word	0x51eb851f
 80028d4:	66666667 	.word	0x66666667
 80028d8:	20000008 	.word	0x20000008
 80028dc:	20000018 	.word	0x20000018
 80028e0:	200002c4 	.word	0x200002c4
 80028e4:	200002c8 	.word	0x200002c8
		}
		else if(setpoint1 < 0 && setpoint2 < 0)
 80028e8:	4b93      	ldr	r3, [pc, #588]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	da54      	bge.n	800299a <HAL_TIM_PeriodElapsedCallback+0x133a>
 80028f0:	4b92      	ldr	r3, [pc, #584]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	da50      	bge.n	800299a <HAL_TIM_PeriodElapsedCallback+0x133a>
		{
			c++;
 80028f8:	4b91      	ldr	r3, [pc, #580]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a90      	ldr	r2, [pc, #576]	; (8002b40 <HAL_TIM_PeriodElapsedCallback+0x14e0>)
 8002900:	6013      	str	r3, [r2, #0]
			setpoint1_temp = -setpoint1;
 8002902:	4b8d      	ldr	r3, [pc, #564]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	425b      	negs	r3, r3
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
			setpoint2_temp = -setpoint2;
 800290a:	4b8c      	ldr	r3, [pc, #560]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	425b      	negs	r3, r3
 8002910:	633b      	str	r3, [r7, #48]	; 0x30
			y[15] = '-';
 8002912:	4b8c      	ldr	r3, [pc, #560]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002914:	222d      	movs	r2, #45	; 0x2d
 8002916:	73da      	strb	r2, [r3, #15]
			y[16] = setpoint1_temp/10 + 48;
 8002918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291a:	4a8b      	ldr	r2, [pc, #556]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 800291c:	fb82 1203 	smull	r1, r2, r2, r3
 8002920:	1092      	asrs	r2, r2, #2
 8002922:	17db      	asrs	r3, r3, #31
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	b2db      	uxtb	r3, r3
 8002928:	3330      	adds	r3, #48	; 0x30
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b85      	ldr	r3, [pc, #532]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 800292e:	741a      	strb	r2, [r3, #16]
			y[17] = setpoint1_temp%10 + 48;
 8002930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002932:	4b85      	ldr	r3, [pc, #532]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002934:	fb83 1302 	smull	r1, r3, r3, r2
 8002938:	1099      	asrs	r1, r3, #2
 800293a:	17d3      	asrs	r3, r2, #31
 800293c:	1ac9      	subs	r1, r1, r3
 800293e:	460b      	mov	r3, r1
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	1ad1      	subs	r1, r2, r3
 8002948:	b2cb      	uxtb	r3, r1
 800294a:	3330      	adds	r3, #48	; 0x30
 800294c:	b2da      	uxtb	r2, r3
 800294e:	4b7d      	ldr	r3, [pc, #500]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002950:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002952:	4b7c      	ldr	r3, [pc, #496]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002954:	222c      	movs	r2, #44	; 0x2c
 8002956:	749a      	strb	r2, [r3, #18]
			y[19] = '-';
 8002958:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 800295a:	222d      	movs	r2, #45	; 0x2d
 800295c:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2_temp/10 + 48;
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	4a79      	ldr	r2, [pc, #484]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002962:	fb82 1203 	smull	r1, r2, r2, r3
 8002966:	1092      	asrs	r2, r2, #2
 8002968:	17db      	asrs	r3, r3, #31
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3330      	adds	r3, #48	; 0x30
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4b74      	ldr	r3, [pc, #464]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002974:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2_temp%10 + 48;
 8002976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002978:	4b73      	ldr	r3, [pc, #460]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 800297a:	fb83 1302 	smull	r1, r3, r3, r2
 800297e:	1099      	asrs	r1, r3, #2
 8002980:	17d3      	asrs	r3, r2, #31
 8002982:	1ac9      	subs	r1, r1, r3
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	1ad1      	subs	r1, r2, r3
 800298e:	b2cb      	uxtb	r3, r1
 8002990:	3330      	adds	r3, #48	; 0x30
 8002992:	b2da      	uxtb	r2, r3
 8002994:	4b6b      	ldr	r3, [pc, #428]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002996:	755a      	strb	r2, [r3, #21]
 8002998:	e195      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
		}
		else if(setpoint1 > 0 && setpoint2 == 0)
 800299a:	4b67      	ldr	r3, [pc, #412]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	dd37      	ble.n	8002a12 <HAL_TIM_PeriodElapsedCallback+0x13b2>
 80029a2:	4b66      	ldr	r3, [pc, #408]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d133      	bne.n	8002a12 <HAL_TIM_PeriodElapsedCallback+0x13b2>
		{
			d++;
 80029aa:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x14ec>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	4a66      	ldr	r2, [pc, #408]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x14ec>)
 80029b2:	6013      	str	r3, [r2, #0]
			y[15] = '+';
 80029b4:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80029b6:	222b      	movs	r2, #43	; 0x2b
 80029b8:	73da      	strb	r2, [r3, #15]
			y[16] = setpoint1/10 + 48;
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a62      	ldr	r2, [pc, #392]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 80029c0:	fb82 1203 	smull	r1, r2, r2, r3
 80029c4:	1092      	asrs	r2, r2, #2
 80029c6:	17db      	asrs	r3, r3, #31
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3330      	adds	r3, #48	; 0x30
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b5c      	ldr	r3, [pc, #368]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80029d2:	741a      	strb	r2, [r3, #16]
			y[17] = setpoint1%10 + 48;
 80029d4:	4b58      	ldr	r3, [pc, #352]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b5b      	ldr	r3, [pc, #364]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 80029da:	fb83 1302 	smull	r1, r3, r3, r2
 80029de:	1099      	asrs	r1, r3, #2
 80029e0:	17d3      	asrs	r3, r2, #31
 80029e2:	1ac9      	subs	r1, r1, r3
 80029e4:	460b      	mov	r3, r1
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	1ad1      	subs	r1, r2, r3
 80029ee:	b2cb      	uxtb	r3, r1
 80029f0:	3330      	adds	r3, #48	; 0x30
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80029f6:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 80029f8:	4b52      	ldr	r3, [pc, #328]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 80029fa:	222c      	movs	r2, #44	; 0x2c
 80029fc:	749a      	strb	r2, [r3, #18]
			y[19] = '+';
 80029fe:	4b51      	ldr	r3, [pc, #324]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a00:	222b      	movs	r2, #43	; 0x2b
 8002a02:	74da      	strb	r2, [r3, #19]
			y[20] = '0';
 8002a04:	4b4f      	ldr	r3, [pc, #316]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a06:	2230      	movs	r2, #48	; 0x30
 8002a08:	751a      	strb	r2, [r3, #20]
			y[21] = '0';
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a0c:	2230      	movs	r2, #48	; 0x30
 8002a0e:	755a      	strb	r2, [r3, #21]
 8002a10:	e159      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
		}
		else if(setpoint1 == 0 && setpoint2 > 0)
 8002a12:	4b49      	ldr	r3, [pc, #292]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d137      	bne.n	8002a8a <HAL_TIM_PeriodElapsedCallback+0x142a>
 8002a1a:	4b48      	ldr	r3, [pc, #288]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	dd33      	ble.n	8002a8a <HAL_TIM_PeriodElapsedCallback+0x142a>
		{
			e++;
 8002a22:	4b4b      	ldr	r3, [pc, #300]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x14f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3301      	adds	r3, #1
 8002a28:	4a49      	ldr	r2, [pc, #292]	; (8002b50 <HAL_TIM_PeriodElapsedCallback+0x14f0>)
 8002a2a:	6013      	str	r3, [r2, #0]
			y[15] = '+';
 8002a2c:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a2e:	222b      	movs	r2, #43	; 0x2b
 8002a30:	73da      	strb	r2, [r3, #15]
			y[16] = '0';
 8002a32:	4b44      	ldr	r3, [pc, #272]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a34:	2230      	movs	r2, #48	; 0x30
 8002a36:	741a      	strb	r2, [r3, #16]
			y[17] = '0';
 8002a38:	4b42      	ldr	r3, [pc, #264]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a3a:	2230      	movs	r2, #48	; 0x30
 8002a3c:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002a3e:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a40:	222c      	movs	r2, #44	; 0x2c
 8002a42:	749a      	strb	r2, [r3, #18]
			y[19] = '+';
 8002a44:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a46:	222b      	movs	r2, #43	; 0x2b
 8002a48:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2/10 + 48;
 8002a4a:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a3e      	ldr	r2, [pc, #248]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002a50:	fb82 1203 	smull	r1, r2, r2, r3
 8002a54:	1092      	asrs	r2, r2, #2
 8002a56:	17db      	asrs	r3, r3, #31
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	3330      	adds	r3, #48	; 0x30
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	4b38      	ldr	r3, [pc, #224]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a62:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2%10 + 48;
 8002a64:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002a6a:	fb83 1302 	smull	r1, r3, r3, r2
 8002a6e:	1099      	asrs	r1, r3, #2
 8002a70:	17d3      	asrs	r3, r2, #31
 8002a72:	1ac9      	subs	r1, r1, r3
 8002a74:	460b      	mov	r3, r1
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	1ad1      	subs	r1, r2, r3
 8002a7e:	b2cb      	uxtb	r3, r1
 8002a80:	3330      	adds	r3, #48	; 0x30
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002a86:	755a      	strb	r2, [r3, #21]
 8002a88:	e11d      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
		}
		else if(setpoint1 < 0 && setpoint2 ==0)
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da62      	bge.n	8002b58 <HAL_TIM_PeriodElapsedCallback+0x14f8>
 8002a92:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d15e      	bne.n	8002b58 <HAL_TIM_PeriodElapsedCallback+0x14f8>
		{	f++;
 8002a9a:	4b2e      	ldr	r3, [pc, #184]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x14f4>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <HAL_TIM_PeriodElapsedCallback+0x14f4>)
 8002aa2:	6013      	str	r3, [r2, #0]
			setpoint1_temp = -setpoint1;
 8002aa4:	4b24      	ldr	r3, [pc, #144]	; (8002b38 <HAL_TIM_PeriodElapsedCallback+0x14d8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	425b      	negs	r3, r3
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
			y[15] = '-';
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002aae:	222d      	movs	r2, #45	; 0x2d
 8002ab0:	73da      	strb	r2, [r3, #15]
			y[16] = setpoint1_temp/10 + 48;
 8002ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002ab6:	fb82 1203 	smull	r1, r2, r2, r3
 8002aba:	1092      	asrs	r2, r2, #2
 8002abc:	17db      	asrs	r3, r3, #31
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	3330      	adds	r3, #48	; 0x30
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002ac8:	741a      	strb	r2, [r3, #16]
			y[17] = setpoint1_temp%10 + 48;
 8002aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002acc:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002ace:	fb83 1302 	smull	r1, r3, r3, r2
 8002ad2:	1099      	asrs	r1, r3, #2
 8002ad4:	17d3      	asrs	r3, r2, #31
 8002ad6:	1ac9      	subs	r1, r1, r3
 8002ad8:	460b      	mov	r3, r1
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	1ad1      	subs	r1, r2, r3
 8002ae2:	b2cb      	uxtb	r3, r1
 8002ae4:	3330      	adds	r3, #48	; 0x30
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b16      	ldr	r3, [pc, #88]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002aea:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002aee:	222c      	movs	r2, #44	; 0x2c
 8002af0:	749a      	strb	r2, [r3, #18]
			y[19] = '+';
 8002af2:	4b14      	ldr	r3, [pc, #80]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002af4:	222b      	movs	r2, #43	; 0x2b
 8002af6:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2/10 + 48;
 8002af8:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a12      	ldr	r2, [pc, #72]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002afe:	fb82 1203 	smull	r1, r2, r2, r3
 8002b02:	1092      	asrs	r2, r2, #2
 8002b04:	17db      	asrs	r3, r3, #31
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	3330      	adds	r3, #48	; 0x30
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002b10:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2%10 + 48;
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_TIM_PeriodElapsedCallback+0x14dc>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x14e8>)
 8002b18:	fb83 1302 	smull	r1, r3, r3, r2
 8002b1c:	1099      	asrs	r1, r3, #2
 8002b1e:	17d3      	asrs	r3, r2, #31
 8002b20:	1ac9      	subs	r1, r1, r3
 8002b22:	460b      	mov	r3, r1
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	440b      	add	r3, r1
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	1ad1      	subs	r1, r2, r3
 8002b2c:	b2cb      	uxtb	r3, r1
 8002b2e:	3330      	adds	r3, #48	; 0x30
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <HAL_TIM_PeriodElapsedCallback+0x14e4>)
 8002b34:	755a      	strb	r2, [r3, #21]
 8002b36:	e0c6      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
 8002b38:	20000008 	.word	0x20000008
 8002b3c:	20000018 	.word	0x20000018
 8002b40:	200002cc 	.word	0x200002cc
 8002b44:	200002fc 	.word	0x200002fc
 8002b48:	66666667 	.word	0x66666667
 8002b4c:	200002d0 	.word	0x200002d0
 8002b50:	200002d4 	.word	0x200002d4
 8002b54:	200002d8 	.word	0x200002d8
		}
		else if(setpoint1 == 0 && setpoint2 <0)
 8002b58:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x16cc>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d139      	bne.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x1574>
 8002b60:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	da35      	bge.n	8002bd4 <HAL_TIM_PeriodElapsedCallback+0x1574>
		{
			g++;
 8002b68:	4b72      	ldr	r3, [pc, #456]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x16d4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	4a71      	ldr	r2, [pc, #452]	; (8002d34 <HAL_TIM_PeriodElapsedCallback+0x16d4>)
 8002b70:	6013      	str	r3, [r2, #0]
			setpoint2_temp = -setpoint2;
 8002b72:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	425b      	negs	r3, r3
 8002b78:	633b      	str	r3, [r7, #48]	; 0x30
			y[15] = '+';
 8002b7a:	4b6f      	ldr	r3, [pc, #444]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002b7c:	222b      	movs	r2, #43	; 0x2b
 8002b7e:	73da      	strb	r2, [r3, #15]
			y[16] = '0';
 8002b80:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002b82:	2230      	movs	r2, #48	; 0x30
 8002b84:	741a      	strb	r2, [r3, #16]
			y[17] = '0';
 8002b86:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002b88:	2230      	movs	r2, #48	; 0x30
 8002b8a:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002b8c:	4b6a      	ldr	r3, [pc, #424]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002b8e:	222c      	movs	r2, #44	; 0x2c
 8002b90:	749a      	strb	r2, [r3, #18]
			y[19] = '-';
 8002b92:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002b94:	222d      	movs	r2, #45	; 0x2d
 8002b96:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2_temp/10 + 48;
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	4a68      	ldr	r2, [pc, #416]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 8002b9c:	fb82 1203 	smull	r1, r2, r2, r3
 8002ba0:	1092      	asrs	r2, r2, #2
 8002ba2:	17db      	asrs	r3, r3, #31
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	3330      	adds	r3, #48	; 0x30
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002bae:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2_temp%10 + 48;
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	4b62      	ldr	r3, [pc, #392]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 8002bb4:	fb83 1302 	smull	r1, r3, r3, r2
 8002bb8:	1099      	asrs	r1, r3, #2
 8002bba:	17d3      	asrs	r3, r2, #31
 8002bbc:	1ac9      	subs	r1, r1, r3
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	1ad1      	subs	r1, r2, r3
 8002bc8:	b2cb      	uxtb	r3, r1
 8002bca:	3330      	adds	r3, #48	; 0x30
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4b5a      	ldr	r3, [pc, #360]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002bd0:	755a      	strb	r2, [r3, #21]
 8002bd2:	e078      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
		}
		else if(setpoint1 == 0 && setpoint2 == 0)
 8002bd4:	4b55      	ldr	r3, [pc, #340]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x16cc>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d11e      	bne.n	8002c1a <HAL_TIM_PeriodElapsedCallback+0x15ba>
 8002bdc:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11a      	bne.n	8002c1a <HAL_TIM_PeriodElapsedCallback+0x15ba>
		{
			h++;
 8002be4:	4b56      	ldr	r3, [pc, #344]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x16e0>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	3301      	adds	r3, #1
 8002bea:	4a55      	ldr	r2, [pc, #340]	; (8002d40 <HAL_TIM_PeriodElapsedCallback+0x16e0>)
 8002bec:	6013      	str	r3, [r2, #0]
			y[15] = '+';
 8002bee:	4b52      	ldr	r3, [pc, #328]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002bf0:	222b      	movs	r2, #43	; 0x2b
 8002bf2:	73da      	strb	r2, [r3, #15]
			y[16] = '0';
 8002bf4:	4b50      	ldr	r3, [pc, #320]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002bf6:	2230      	movs	r2, #48	; 0x30
 8002bf8:	741a      	strb	r2, [r3, #16]
			y[17] = '0';
 8002bfa:	4b4f      	ldr	r3, [pc, #316]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002bfc:	2230      	movs	r2, #48	; 0x30
 8002bfe:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002c00:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c02:	222c      	movs	r2, #44	; 0x2c
 8002c04:	749a      	strb	r2, [r3, #18]
			y[19] = '+';
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c08:	222b      	movs	r2, #43	; 0x2b
 8002c0a:	74da      	strb	r2, [r3, #19]
			y[20] = '0';
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c0e:	2230      	movs	r2, #48	; 0x30
 8002c10:	751a      	strb	r2, [r3, #20]
			y[21] = '0';
 8002c12:	4b49      	ldr	r3, [pc, #292]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c14:	2230      	movs	r2, #48	; 0x30
 8002c16:	755a      	strb	r2, [r3, #21]
 8002c18:	e055      	b.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
		}
		else if(setpoint1 < 0 && setpoint2 > 0)
 8002c1a:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x16cc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	da51      	bge.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	dd4d      	ble.n	8002cc6 <HAL_TIM_PeriodElapsedCallback+0x1666>
		{
			t++;
 8002c2a:	4b46      	ldr	r3, [pc, #280]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x16e4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a44      	ldr	r2, [pc, #272]	; (8002d44 <HAL_TIM_PeriodElapsedCallback+0x16e4>)
 8002c32:	6013      	str	r3, [r2, #0]
			setpoint1_temp = -setpoint1;
 8002c34:	4b3d      	ldr	r3, [pc, #244]	; (8002d2c <HAL_TIM_PeriodElapsedCallback+0x16cc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	425b      	negs	r3, r3
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			y[15] = '-';
 8002c3c:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c3e:	222d      	movs	r2, #45	; 0x2d
 8002c40:	73da      	strb	r2, [r3, #15]
			y[16] = setpoint1_temp/10 + 48;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 8002c46:	fb82 1203 	smull	r1, r2, r2, r3
 8002c4a:	1092      	asrs	r2, r2, #2
 8002c4c:	17db      	asrs	r3, r3, #31
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	3330      	adds	r3, #48	; 0x30
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c58:	741a      	strb	r2, [r3, #16]
			y[17] = setpoint1_temp%10 + 48;
 8002c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 8002c5e:	fb83 1302 	smull	r1, r3, r3, r2
 8002c62:	1099      	asrs	r1, r3, #2
 8002c64:	17d3      	asrs	r3, r2, #31
 8002c66:	1ac9      	subs	r1, r1, r3
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	005b      	lsls	r3, r3, #1
 8002c70:	1ad1      	subs	r1, r2, r3
 8002c72:	b2cb      	uxtb	r3, r1
 8002c74:	3330      	adds	r3, #48	; 0x30
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c7a:	745a      	strb	r2, [r3, #17]
			y[18] = ',';
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c7e:	222c      	movs	r2, #44	; 0x2c
 8002c80:	749a      	strb	r2, [r3, #18]
			y[19] = '+';
 8002c82:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002c84:	222b      	movs	r2, #43	; 0x2b
 8002c86:	74da      	strb	r2, [r3, #19]
			y[20] = setpoint2/10 + 48;
 8002c88:	4b29      	ldr	r3, [pc, #164]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 8002c8e:	fb82 1203 	smull	r1, r2, r2, r3
 8002c92:	1092      	asrs	r2, r2, #2
 8002c94:	17db      	asrs	r3, r3, #31
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	3330      	adds	r3, #48	; 0x30
 8002c9c:	b2da      	uxtb	r2, r3
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002ca0:	751a      	strb	r2, [r3, #20]
			y[21] = setpoint2%10 + 48;
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <HAL_TIM_PeriodElapsedCallback+0x16d0>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b25      	ldr	r3, [pc, #148]	; (8002d3c <HAL_TIM_PeriodElapsedCallback+0x16dc>)
 8002ca8:	fb83 1302 	smull	r1, r3, r3, r2
 8002cac:	1099      	asrs	r1, r3, #2
 8002cae:	17d3      	asrs	r3, r2, #31
 8002cb0:	1ac9      	subs	r1, r1, r3
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	1ad1      	subs	r1, r2, r3
 8002cbc:	b2cb      	uxtb	r3, r1
 8002cbe:	3330      	adds	r3, #48	; 0x30
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002cc4:	755a      	strb	r2, [r3, #21]
		}
		y[22] = '/';
 8002cc6:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002cc8:	222f      	movs	r2, #47	; 0x2f
 8002cca:	759a      	strb	r2, [r3, #22]
		y[23] = '\n' ;
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002cce:	220a      	movs	r2, #10
 8002cd0:	75da      	strb	r2, [r3, #23]
		//}



	}
	if(htim->Instance == htim7.Instance)
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	; (8002d48 <HAL_TIM_PeriodElapsedCallback+0x16e8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d121      	bne.n	8002d22 <HAL_TIM_PeriodElapsedCallback+0x16c2>
	{
		f1 = -3.1415;
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x16ec>)
 8002ce0:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_TIM_PeriodElapsedCallback+0x16f0>)
 8002ce2:	601a      	str	r2, [r3, #0]
		*(float*)f12bytes=f1;
 8002ce4:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x16f4>)
 8002ce6:	4b19      	ldr	r3, [pc, #100]	; (8002d4c <HAL_TIM_PeriodElapsedCallback+0x16ec>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6013      	str	r3, [r2, #0]
		bytes2f  = *(float*)(f12bytes);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x16f4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a19      	ldr	r2, [pc, #100]	; (8002d58 <HAL_TIM_PeriodElapsedCallback+0x16f8>)
 8002cf2:	6013      	str	r3, [r2, #0]
		f12bytes[4] = '\n';
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_TIM_PeriodElapsedCallback+0x16f4>)
 8002cf6:	220a      	movs	r2, #10
 8002cf8:	711a      	strb	r2, [r3, #4]
		HAL_UART_Transmit(&huart2,y,sizeof(y),2000);
 8002cfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002cfe:	2218      	movs	r2, #24
 8002d00:	490d      	ldr	r1, [pc, #52]	; (8002d38 <HAL_TIM_PeriodElapsedCallback+0x16d8>)
 8002d02:	4816      	ldr	r0, [pc, #88]	; (8002d5c <HAL_TIM_PeriodElapsedCallback+0x16fc>)
 8002d04:	f002 ff43 	bl	8005b8e <HAL_UART_Transmit>
		biendem++;
 8002d08:	4b15      	ldr	r3, [pc, #84]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x1700>)
 8002d0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_TIM_PeriodElapsedCallback+0x1704>)
 8002d14:	f7fd fa5e 	bl	80001d4 <__adddf3>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4910      	ldr	r1, [pc, #64]	; (8002d60 <HAL_TIM_PeriodElapsedCallback+0x1700>)
 8002d1e:	e9c1 2300 	strd	r2, r3, [r1]

	}


}
 8002d22:	bf00      	nop
 8002d24:	3738      	adds	r7, #56	; 0x38
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	20000018 	.word	0x20000018
 8002d34:	200002dc 	.word	0x200002dc
 8002d38:	200002fc 	.word	0x200002fc
 8002d3c:	66666667 	.word	0x66666667
 8002d40:	200002e0 	.word	0x200002e0
 8002d44:	200002e4 	.word	0x200002e4
 8002d48:	2000012c 	.word	0x2000012c
 8002d4c:	200002c0 	.word	0x200002c0
 8002d50:	c0490e56 	.word	0xc0490e56
 8002d54:	20000314 	.word	0x20000314
 8002d58:	2000031c 	.word	0x2000031c
 8002d5c:	200001bc 	.word	0x200001bc
 8002d60:	20000410 	.word	0x20000410
 8002d64:	3ff00000 	.word	0x3ff00000

08002d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <Error_Handler+0x8>
	...

08002d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <HAL_MspInit+0x4c>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <HAL_MspInit+0x4c>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b0d      	ldr	r3, [pc, #52]	; (8002dc0 <HAL_MspInit+0x4c>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	607b      	str	r3, [r7, #4]
 8002d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_MspInit+0x4c>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_MspInit+0x4c>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6413      	str	r3, [r2, #64]	; 0x40
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_MspInit+0x4c>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40023800 	.word	0x40023800

08002dc4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08c      	sub	sp, #48	; 0x30
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 031c 	add.w	r3, r7, #28
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a32      	ldr	r2, [pc, #200]	; (8002eac <HAL_TIM_Encoder_MspInit+0xe8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d12c      	bne.n	8002e40 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	4b31      	ldr	r3, [pc, #196]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	4a30      	ldr	r2, [pc, #192]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	6413      	str	r3, [r2, #64]	; 0x40
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	61bb      	str	r3, [r7, #24]
 8002e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	4b2a      	ldr	r3, [pc, #168]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0a:	4a29      	ldr	r2, [pc, #164]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	6313      	str	r3, [r2, #48]	; 0x30
 8002e12:	4b27      	ldr	r3, [pc, #156]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e1e:	23c0      	movs	r3, #192	; 0xc0
 8002e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e22:	2302      	movs	r3, #2
 8002e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f107 031c 	add.w	r3, r7, #28
 8002e36:	4619      	mov	r1, r3
 8002e38:	481e      	ldr	r0, [pc, #120]	; (8002eb4 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002e3a:	f000 ffb7 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002e3e:	e031      	b.n	8002ea4 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12c      	bne.n	8002ea4 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	4a17      	ldr	r2, [pc, #92]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e54:	f043 0304 	orr.w	r3, r3, #4
 8002e58:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5a:	4b15      	ldr	r3, [pc, #84]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5e:	f003 0304 	and.w	r3, r3, #4
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	4a10      	ldr	r2, [pc, #64]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e70:	f043 0308 	orr.w	r3, r3, #8
 8002e74:	6313      	str	r3, [r2, #48]	; 0x30
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <HAL_TIM_Encoder_MspInit+0xec>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f003 0308 	and.w	r3, r3, #8
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002e82:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e94:	2302      	movs	r3, #2
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e98:	f107 031c 	add.w	r3, r7, #28
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4807      	ldr	r0, [pc, #28]	; (8002ebc <HAL_TIM_Encoder_MspInit+0xf8>)
 8002ea0:	f000 ff84 	bl	8003dac <HAL_GPIO_Init>
}
 8002ea4:	bf00      	nop
 8002ea6:	3730      	adds	r7, #48	; 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40000400 	.word	0x40000400
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40020c00 	.word	0x40020c00

08002ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	; (8002f40 <HAL_TIM_Base_MspInit+0x80>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d116      	bne.n	8002f00 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b1b      	ldr	r3, [pc, #108]	; (8002f44 <HAL_TIM_Base_MspInit+0x84>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <HAL_TIM_Base_MspInit+0x84>)
 8002edc:	f043 0310 	orr.w	r3, r3, #16
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <HAL_TIM_Base_MspInit+0x84>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	2036      	movs	r0, #54	; 0x36
 8002ef4:	f000 fb21 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ef8:	2036      	movs	r0, #54	; 0x36
 8002efa:	f000 fb3a 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002efe:	e01a      	b.n	8002f36 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a10      	ldr	r2, [pc, #64]	; (8002f48 <HAL_TIM_Base_MspInit+0x88>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d115      	bne.n	8002f36 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60bb      	str	r3, [r7, #8]
 8002f0e:	4b0d      	ldr	r3, [pc, #52]	; (8002f44 <HAL_TIM_Base_MspInit+0x84>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	4a0c      	ldr	r2, [pc, #48]	; (8002f44 <HAL_TIM_Base_MspInit+0x84>)
 8002f14:	f043 0320 	orr.w	r3, r3, #32
 8002f18:	6413      	str	r3, [r2, #64]	; 0x40
 8002f1a:	4b0a      	ldr	r3, [pc, #40]	; (8002f44 <HAL_TIM_Base_MspInit+0x84>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	60bb      	str	r3, [r7, #8]
 8002f24:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 2, 0);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2102      	movs	r1, #2
 8002f2a:	2037      	movs	r0, #55	; 0x37
 8002f2c:	f000 fb05 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002f30:	2037      	movs	r0, #55	; 0x37
 8002f32:	f000 fb1e 	bl	8003572 <HAL_NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40001000 	.word	0x40001000
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40001400 	.word	0x40001400

08002f4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM8)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_TIM_PWM_MspInit+0x3c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10d      	bne.n	8002f7a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_TIM_PWM_MspInit+0x40>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <HAL_TIM_PWM_MspInit+0x40>)
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <HAL_TIM_PWM_MspInit+0x40>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002f7a:	bf00      	nop
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010400 	.word	0x40010400
 8002f8c:	40023800 	.word	0x40023800

08002f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 030c 	add.w	r3, r7, #12
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a12      	ldr	r2, [pc, #72]	; (8002ff8 <HAL_TIM_MspPostInit+0x68>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d11d      	bne.n	8002fee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_TIM_MspPostInit+0x6c>)
 8002fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_TIM_MspPostInit+0x6c>)
 8002fbc:	f043 0304 	orr.w	r3, r3, #4
 8002fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fc2:	4b0e      	ldr	r3, [pc, #56]	; (8002ffc <HAL_TIM_MspPostInit+0x6c>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fce:	23c0      	movs	r3, #192	; 0xc0
 8002fd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe2:	f107 030c 	add.w	r3, r7, #12
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4805      	ldr	r0, [pc, #20]	; (8003000 <HAL_TIM_MspPostInit+0x70>)
 8002fea:	f000 fedf 	bl	8003dac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002fee:	bf00      	nop
 8002ff0:	3720      	adds	r7, #32
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40010400 	.word	0x40010400
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40020800 	.word	0x40020800

08003004 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b08a      	sub	sp, #40	; 0x28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	f107 0314 	add.w	r3, r7, #20
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]
 8003014:	605a      	str	r2, [r3, #4]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	60da      	str	r2, [r3, #12]
 800301a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a4c      	ldr	r2, [pc, #304]	; (8003154 <HAL_UART_MspInit+0x150>)
 8003022:	4293      	cmp	r3, r2
 8003024:	f040 8092 	bne.w	800314c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	4b4a      	ldr	r3, [pc, #296]	; (8003158 <HAL_UART_MspInit+0x154>)
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	4a49      	ldr	r2, [pc, #292]	; (8003158 <HAL_UART_MspInit+0x154>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003036:	6413      	str	r3, [r2, #64]	; 0x40
 8003038:	4b47      	ldr	r3, [pc, #284]	; (8003158 <HAL_UART_MspInit+0x154>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003040:	613b      	str	r3, [r7, #16]
 8003042:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_UART_MspInit+0x154>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	4a42      	ldr	r2, [pc, #264]	; (8003158 <HAL_UART_MspInit+0x154>)
 800304e:	f043 0301 	orr.w	r3, r3, #1
 8003052:	6313      	str	r3, [r2, #48]	; 0x30
 8003054:	4b40      	ldr	r3, [pc, #256]	; (8003158 <HAL_UART_MspInit+0x154>)
 8003056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003060:	230c      	movs	r3, #12
 8003062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003064:	2302      	movs	r3, #2
 8003066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306c:	2303      	movs	r3, #3
 800306e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003070:	2307      	movs	r3, #7
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	4619      	mov	r1, r3
 800307a:	4838      	ldr	r0, [pc, #224]	; (800315c <HAL_UART_MspInit+0x158>)
 800307c:	f000 fe96 	bl	8003dac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003080:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_UART_MspInit+0x15c>)
 8003082:	4a38      	ldr	r2, [pc, #224]	; (8003164 <HAL_UART_MspInit+0x160>)
 8003084:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003086:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_UART_MspInit+0x15c>)
 8003088:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800308c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_UART_MspInit+0x15c>)
 8003090:	2200      	movs	r2, #0
 8003092:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <HAL_UART_MspInit+0x15c>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_UART_MspInit+0x15c>)
 800309c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a2:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80030ae:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b6:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030c2:	4827      	ldr	r0, [pc, #156]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030c4:	f000 fa70 	bl	80035a8 <HAL_DMA_Init>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80030ce:	f7ff fe4b 	bl	8002d68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a22      	ldr	r2, [pc, #136]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <HAL_UART_MspInit+0x15c>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80030de:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_UART_MspInit+0x164>)
 80030e0:	4a22      	ldr	r2, [pc, #136]	; (800316c <HAL_UART_MspInit+0x168>)
 80030e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80030e4:	4b20      	ldr	r3, [pc, #128]	; (8003168 <HAL_UART_MspInit+0x164>)
 80030e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_UART_MspInit+0x164>)
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_UART_MspInit+0x164>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_UART_MspInit+0x164>)
 80030fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_UART_MspInit+0x164>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003106:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_UART_MspInit+0x164>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_UART_MspInit+0x164>)
 800310e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003112:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003114:	4b14      	ldr	r3, [pc, #80]	; (8003168 <HAL_UART_MspInit+0x164>)
 8003116:	2200      	movs	r2, #0
 8003118:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_UART_MspInit+0x164>)
 800311c:	2200      	movs	r2, #0
 800311e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003120:	4811      	ldr	r0, [pc, #68]	; (8003168 <HAL_UART_MspInit+0x164>)
 8003122:	f000 fa41 	bl	80035a8 <HAL_DMA_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800312c:	f7ff fe1c 	bl	8002d68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <HAL_UART_MspInit+0x164>)
 8003134:	635a      	str	r2, [r3, #52]	; 0x34
 8003136:	4a0c      	ldr	r2, [pc, #48]	; (8003168 <HAL_UART_MspInit+0x164>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800313c:	2200      	movs	r2, #0
 800313e:	2101      	movs	r1, #1
 8003140:	2026      	movs	r0, #38	; 0x26
 8003142:	f000 f9fa 	bl	800353a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003146:	2026      	movs	r0, #38	; 0x26
 8003148:	f000 fa13 	bl	8003572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800314c:	bf00      	nop
 800314e:	3728      	adds	r7, #40	; 0x28
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40004400 	.word	0x40004400
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000
 8003160:	20000200 	.word	0x20000200
 8003164:	40026088 	.word	0x40026088
 8003168:	20000260 	.word	0x20000260
 800316c:	400260a0 	.word	0x400260a0

08003170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003174:	e7fe      	b.n	8003174 <NMI_Handler+0x4>

08003176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317a:	e7fe      	b.n	800317a <HardFault_Handler+0x4>

0800317c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003180:	e7fe      	b.n	8003180 <MemManage_Handler+0x4>

08003182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003186:	e7fe      	b.n	8003186 <BusFault_Handler+0x4>

08003188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800318c:	e7fe      	b.n	800318c <UsageFault_Handler+0x4>

0800318e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800318e:	b480      	push	{r7}
 8003190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031a0:	bf00      	nop
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031bc:	f000 f8c2 	bl	8003344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <DMA1_Stream5_IRQHandler+0x10>)
 80031ca:	f000 fb85 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	20000200 	.word	0x20000200

080031d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80031dc:	4802      	ldr	r0, [pc, #8]	; (80031e8 <DMA1_Stream6_IRQHandler+0x10>)
 80031de:	f000 fb7b 	bl	80038d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80031e2:	bf00      	nop
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000260 	.word	0x20000260

080031ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031f0:	4802      	ldr	r0, [pc, #8]	; (80031fc <USART2_IRQHandler+0x10>)
 80031f2:	f002 fd8f 	bl	8005d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	200001bc 	.word	0x200001bc

08003200 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003204:	4802      	ldr	r0, [pc, #8]	; (8003210 <TIM6_DAC_IRQHandler+0x10>)
 8003206:	f001 ff2b 	bl	8005060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200000e4 	.word	0x200000e4

08003214 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <TIM7_IRQHandler+0x10>)
 800321a:	f001 ff21 	bl	8005060 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000012c 	.word	0x2000012c

08003228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800322c:	4b06      	ldr	r3, [pc, #24]	; (8003248 <SystemInit+0x20>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	4a05      	ldr	r2, [pc, #20]	; (8003248 <SystemInit+0x20>)
 8003234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800323c:	bf00      	nop
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800324c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003250:	480d      	ldr	r0, [pc, #52]	; (8003288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003252:	490e      	ldr	r1, [pc, #56]	; (800328c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003254:	4a0e      	ldr	r2, [pc, #56]	; (8003290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0b      	ldr	r2, [pc, #44]	; (8003294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003268:	4c0b      	ldr	r4, [pc, #44]	; (8003298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003276:	f7ff ffd7 	bl	8003228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800327a:	f003 fe3b 	bl	8006ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800327e:	f7fd fdbf 	bl	8000e00 <main>
  bx  lr    
 8003282:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800328c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8003290:	08006f84 	.word	0x08006f84
  ldr r2, =_sbss
 8003294:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8003298:	200004f4 	.word	0x200004f4

0800329c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800329c:	e7fe      	b.n	800329c <ADC_IRQHandler>
	...

080032a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_Init+0x40>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0d      	ldr	r2, [pc, #52]	; (80032e0 <HAL_Init+0x40>)
 80032aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032b0:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0a      	ldr	r2, [pc, #40]	; (80032e0 <HAL_Init+0x40>)
 80032b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a07      	ldr	r2, [pc, #28]	; (80032e0 <HAL_Init+0x40>)
 80032c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c8:	2003      	movs	r0, #3
 80032ca:	f000 f92b 	bl	8003524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ce:	200f      	movs	r0, #15
 80032d0:	f000 f808 	bl	80032e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032d4:	f7ff fd4e 	bl	8002d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40023c00 	.word	0x40023c00

080032e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ec:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_InitTick+0x54>)
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	4b12      	ldr	r3, [pc, #72]	; (800333c <HAL_InitTick+0x58>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	4619      	mov	r1, r3
 80032f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80032fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003302:	4618      	mov	r0, r3
 8003304:	f000 f943 	bl	800358e <HAL_SYSTICK_Config>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e00e      	b.n	8003330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d80a      	bhi.n	800332e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003318:	2200      	movs	r2, #0
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f000 f90b 	bl	800353a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003324:	4a06      	ldr	r2, [pc, #24]	; (8003340 <HAL_InitTick+0x5c>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800332a:	2300      	movs	r3, #0
 800332c:	e000      	b.n	8003330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	20000028 	.word	0x20000028
 800333c:	20000030 	.word	0x20000030
 8003340:	2000002c 	.word	0x2000002c

08003344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003348:	4b06      	ldr	r3, [pc, #24]	; (8003364 <HAL_IncTick+0x20>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	4b06      	ldr	r3, [pc, #24]	; (8003368 <HAL_IncTick+0x24>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4413      	add	r3, r2
 8003354:	4a04      	ldr	r2, [pc, #16]	; (8003368 <HAL_IncTick+0x24>)
 8003356:	6013      	str	r3, [r2, #0]
}
 8003358:	bf00      	nop
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000030 	.word	0x20000030
 8003368:	200004f0 	.word	0x200004f0

0800336c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  return uwTick;
 8003370:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_GetTick+0x14>)
 8003372:	681b      	ldr	r3, [r3, #0]
}
 8003374:	4618      	mov	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	200004f0 	.word	0x200004f0

08003384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003394:	4b0c      	ldr	r3, [pc, #48]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033a0:	4013      	ands	r3, r2
 80033a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033b6:	4a04      	ldr	r2, [pc, #16]	; (80033c8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60d3      	str	r3, [r2, #12]
}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033d0:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <__NVIC_GetPriorityGrouping+0x18>)
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0307 	and.w	r3, r3, #7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db0b      	blt.n	8003412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f003 021f 	and.w	r2, r3, #31
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <__NVIC_EnableIRQ+0x38>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	2001      	movs	r0, #1
 800340a:	fa00 f202 	lsl.w	r2, r0, r2
 800340e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	e000e100 	.word	0xe000e100

08003424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	4603      	mov	r3, r0
 800342c:	6039      	str	r1, [r7, #0]
 800342e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003434:	2b00      	cmp	r3, #0
 8003436:	db0a      	blt.n	800344e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	490c      	ldr	r1, [pc, #48]	; (8003470 <__NVIC_SetPriority+0x4c>)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	0112      	lsls	r2, r2, #4
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	440b      	add	r3, r1
 8003448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800344c:	e00a      	b.n	8003464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	4908      	ldr	r1, [pc, #32]	; (8003474 <__NVIC_SetPriority+0x50>)
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	3b04      	subs	r3, #4
 800345c:	0112      	lsls	r2, r2, #4
 800345e:	b2d2      	uxtb	r2, r2
 8003460:	440b      	add	r3, r1
 8003462:	761a      	strb	r2, [r3, #24]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	e000e100 	.word	0xe000e100
 8003474:	e000ed00 	.word	0xe000ed00

08003478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003478:	b480      	push	{r7}
 800347a:	b089      	sub	sp, #36	; 0x24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	f1c3 0307 	rsb	r3, r3, #7
 8003492:	2b04      	cmp	r3, #4
 8003494:	bf28      	it	cs
 8003496:	2304      	movcs	r3, #4
 8003498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3304      	adds	r3, #4
 800349e:	2b06      	cmp	r3, #6
 80034a0:	d902      	bls.n	80034a8 <NVIC_EncodePriority+0x30>
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	3b03      	subs	r3, #3
 80034a6:	e000      	b.n	80034aa <NVIC_EncodePriority+0x32>
 80034a8:	2300      	movs	r3, #0
 80034aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43da      	mvns	r2, r3
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	401a      	ands	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034c0:	f04f 31ff 	mov.w	r1, #4294967295
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	43d9      	mvns	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	4313      	orrs	r3, r2
         );
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
	...

080034e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034f0:	d301      	bcc.n	80034f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034f2:	2301      	movs	r3, #1
 80034f4:	e00f      	b.n	8003516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034f6:	4a0a      	ldr	r2, [pc, #40]	; (8003520 <SysTick_Config+0x40>)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034fe:	210f      	movs	r1, #15
 8003500:	f04f 30ff 	mov.w	r0, #4294967295
 8003504:	f7ff ff8e 	bl	8003424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <SysTick_Config+0x40>)
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800350e:	4b04      	ldr	r3, [pc, #16]	; (8003520 <SysTick_Config+0x40>)
 8003510:	2207      	movs	r2, #7
 8003512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	e000e010 	.word	0xe000e010

08003524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f7ff ff29 	bl	8003384 <__NVIC_SetPriorityGrouping>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800353a:	b580      	push	{r7, lr}
 800353c:	b086      	sub	sp, #24
 800353e:	af00      	add	r7, sp, #0
 8003540:	4603      	mov	r3, r0
 8003542:	60b9      	str	r1, [r7, #8]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800354c:	f7ff ff3e 	bl	80033cc <__NVIC_GetPriorityGrouping>
 8003550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	6978      	ldr	r0, [r7, #20]
 8003558:	f7ff ff8e 	bl	8003478 <NVIC_EncodePriority>
 800355c:	4602      	mov	r2, r0
 800355e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003562:	4611      	mov	r1, r2
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff5d 	bl	8003424 <__NVIC_SetPriority>
}
 800356a:	bf00      	nop
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	4603      	mov	r3, r0
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800357c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff31 	bl	80033e8 <__NVIC_EnableIRQ>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7ff ffa2 	bl	80034e0 <SysTick_Config>
 800359c:	4603      	mov	r3, r0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035b4:	f7ff feda 	bl	800336c <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d101      	bne.n	80035c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e099      	b.n	80036f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f022 0201 	bic.w	r2, r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e4:	e00f      	b.n	8003606 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035e6:	f7ff fec1 	bl	800336c <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d908      	bls.n	8003606 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2203      	movs	r2, #3
 80035fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e078      	b.n	80036f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1e8      	bne.n	80035e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4b38      	ldr	r3, [pc, #224]	; (8003700 <HAL_DMA_Init+0x158>)
 8003620:	4013      	ands	r3, r2
 8003622:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003632:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800363e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800364a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003652:	697a      	ldr	r2, [r7, #20]
 8003654:	4313      	orrs	r3, r2
 8003656:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	2b04      	cmp	r3, #4
 800365e:	d107      	bne.n	8003670 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	4313      	orrs	r3, r2
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0307 	bic.w	r3, r3, #7
 8003686:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	2b04      	cmp	r3, #4
 8003698:	d117      	bne.n	80036ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f000 fb01 	bl	8003cb4 <DMA_CheckFifoParam>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d008      	beq.n	80036ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2240      	movs	r2, #64	; 0x40
 80036bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036c6:	2301      	movs	r3, #1
 80036c8:	e016      	b.n	80036f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 fab8 	bl	8003c48 <DMA_CalcBaseAndBitshift>
 80036d8:	4603      	mov	r3, r0
 80036da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	223f      	movs	r2, #63	; 0x3f
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	f010803f 	.word	0xf010803f

08003704 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_DMA_Start_IT+0x26>
 8003726:	2302      	movs	r3, #2
 8003728:	e040      	b.n	80037ac <HAL_DMA_Start_IT+0xa8>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b01      	cmp	r3, #1
 800373c:	d12f      	bne.n	800379e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2202      	movs	r2, #2
 8003742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fa4a 	bl	8003bec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375c:	223f      	movs	r2, #63	; 0x3f
 800375e:	409a      	lsls	r2, r3
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0216 	orr.w	r2, r2, #22
 8003772:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d007      	beq.n	800378c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0208 	orr.w	r2, r2, #8
 800378a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0201 	orr.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]
 800379c:	e005      	b.n	80037aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037a6:	2302      	movs	r3, #2
 80037a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80037c2:	f7ff fdd3 	bl	800336c <HAL_GetTick>
 80037c6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d008      	beq.n	80037e6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e052      	b.n	800388c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0216 	bic.w	r2, r2, #22
 80037f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695a      	ldr	r2, [r3, #20]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003804:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_DMA_Abort+0x62>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003812:	2b00      	cmp	r3, #0
 8003814:	d007      	beq.n	8003826 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0208 	bic.w	r2, r2, #8
 8003824:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003836:	e013      	b.n	8003860 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003838:	f7ff fd98 	bl	800336c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b05      	cmp	r3, #5
 8003844:	d90c      	bls.n	8003860 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2203      	movs	r2, #3
 8003850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800385c:	2303      	movs	r3, #3
 800385e:	e015      	b.n	800388c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e4      	bne.n	8003838 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003872:	223f      	movs	r2, #63	; 0x3f
 8003874:	409a      	lsls	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d004      	beq.n	80038b2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2280      	movs	r2, #128	; 0x80
 80038ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00c      	b.n	80038cc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2205      	movs	r2, #5
 80038b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80038ca:	2300      	movs	r3, #0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038e4:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <HAL_DMA_IRQHandler+0x248>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a8e      	ldr	r2, [pc, #568]	; (8003b24 <HAL_DMA_IRQHandler+0x24c>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	2208      	movs	r2, #8
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d01a      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0204 	bic.w	r2, r2, #4
 800392a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	2208      	movs	r2, #8
 8003932:	409a      	lsls	r2, r3
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800393c:	f043 0201 	orr.w	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2201      	movs	r2, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4013      	ands	r3, r2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d012      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003966:	2201      	movs	r2, #1
 8003968:	409a      	lsls	r2, r3
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2204      	movs	r2, #4
 8003980:	409a      	lsls	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	4013      	ands	r3, r2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d012      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00b      	beq.n	80039b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399c:	2204      	movs	r2, #4
 800399e:	409a      	lsls	r2, r3
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a8:	f043 0204 	orr.w	r2, r3, #4
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	2210      	movs	r2, #16
 80039b6:	409a      	lsls	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d043      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d03c      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	2210      	movs	r2, #16
 80039d4:	409a      	lsls	r2, r3
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d018      	beq.n	8003a1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d108      	bne.n	8003a08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d024      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	4798      	blx	r3
 8003a06:	e01f      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	4798      	blx	r3
 8003a18:	e016      	b.n	8003a48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0208 	bic.w	r2, r2, #8
 8003a36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 808f 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8087 	beq.w	8003b78 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2220      	movs	r2, #32
 8003a70:	409a      	lsls	r2, r3
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b05      	cmp	r3, #5
 8003a80:	d136      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0216 	bic.w	r2, r2, #22
 8003a90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695a      	ldr	r2, [r3, #20]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003aa0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <HAL_DMA_IRQHandler+0x1da>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0208 	bic.w	r2, r2, #8
 8003ac0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	223f      	movs	r2, #63	; 0x3f
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d07e      	beq.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
        }
        return;
 8003aee:	e079      	b.n	8003be4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d01d      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10d      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	4798      	blx	r3
 8003b1c:	e02c      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
 8003b1e:	bf00      	nop
 8003b20:	20000028 	.word	0x20000028
 8003b24:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d023      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
 8003b38:	e01e      	b.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10f      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 0210 	bic.w	r2, r2, #16
 8003b56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d032      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d022      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2205      	movs	r2, #5
 8003b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d307      	bcc.n	8003bc0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f2      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0x2cc>
 8003bbe:	e000      	b.n	8003bc2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003bc0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d005      	beq.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	4798      	blx	r3
 8003be2:	e000      	b.n	8003be6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003be4:	bf00      	nop
    }
  }
}
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	2b40      	cmp	r3, #64	; 0x40
 8003c18:	d108      	bne.n	8003c2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c2a:	e007      	b.n	8003c3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68ba      	ldr	r2, [r7, #8]
 8003c32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]
}
 8003c3c:	bf00      	nop
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	3b10      	subs	r3, #16
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <DMA_CalcBaseAndBitshift+0x64>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c62:	4a13      	ldr	r2, [pc, #76]	; (8003cb0 <DMA_CalcBaseAndBitshift+0x68>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b03      	cmp	r3, #3
 8003c74:	d909      	bls.n	8003c8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	1d1a      	adds	r2, r3, #4
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	659a      	str	r2, [r3, #88]	; 0x58
 8003c88:	e007      	b.n	8003c9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c92:	f023 0303 	bic.w	r3, r3, #3
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	aaaaaaab 	.word	0xaaaaaaab
 8003cb0:	08006f6c 	.word	0x08006f6c

08003cb4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d856      	bhi.n	8003d82 <DMA_CheckFifoParam+0xce>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <DMA_CheckFifoParam+0x28>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003ced 	.word	0x08003ced
 8003ce0:	08003cff 	.word	0x08003cff
 8003ce4:	08003ced 	.word	0x08003ced
 8003ce8:	08003d83 	.word	0x08003d83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d046      	beq.n	8003d86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cfc:	e043      	b.n	8003d86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d06:	d140      	bne.n	8003d8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0c:	e03d      	b.n	8003d8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d16:	d121      	bne.n	8003d5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d837      	bhi.n	8003d8e <DMA_CheckFifoParam+0xda>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <DMA_CheckFifoParam+0x70>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d3b 	.word	0x08003d3b
 8003d2c:	08003d35 	.word	0x08003d35
 8003d30:	08003d4d 	.word	0x08003d4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
      break;
 8003d38:	e030      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d025      	beq.n	8003d92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4a:	e022      	b.n	8003d92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d54:	d11f      	bne.n	8003d96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d5a:	e01c      	b.n	8003d96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d903      	bls.n	8003d6a <DMA_CheckFifoParam+0xb6>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b03      	cmp	r3, #3
 8003d66:	d003      	beq.n	8003d70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d68:	e018      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8003d6e:	e015      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8003d80:	e00b      	b.n	8003d9a <DMA_CheckFifoParam+0xe6>
      break;
 8003d82:	bf00      	nop
 8003d84:	e00a      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d86:	bf00      	nop
 8003d88:	e008      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8a:	bf00      	nop
 8003d8c:	e006      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d8e:	bf00      	nop
 8003d90:	e004      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;   
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <DMA_CheckFifoParam+0xe8>
      break;
 8003d9a:	bf00      	nop
    }
  } 
  
  return status; 
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop

08003dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b089      	sub	sp, #36	; 0x24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	e16b      	b.n	80040a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 815a 	bne.w	800409a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d005      	beq.n	8003dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d130      	bne.n	8003e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	2203      	movs	r2, #3
 8003e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69ba      	ldr	r2, [r7, #24]
 8003e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e34:	2201      	movs	r2, #1
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 0201 	and.w	r2, r3, #1
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d017      	beq.n	8003e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	2203      	movs	r2, #3
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4013      	ands	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d123      	bne.n	8003ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	08da      	lsrs	r2, r3, #3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3208      	adds	r2, #8
 8003eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	220f      	movs	r2, #15
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	08da      	lsrs	r2, r3, #3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3208      	adds	r2, #8
 8003eea:	69b9      	ldr	r1, [r7, #24]
 8003eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	2203      	movs	r2, #3
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4013      	ands	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f003 0203 	and.w	r2, r3, #3
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 80b4 	beq.w	800409a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	4b60      	ldr	r3, [pc, #384]	; (80040b8 <HAL_GPIO_Init+0x30c>)
 8003f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3a:	4a5f      	ldr	r2, [pc, #380]	; (80040b8 <HAL_GPIO_Init+0x30c>)
 8003f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f40:	6453      	str	r3, [r2, #68]	; 0x44
 8003f42:	4b5d      	ldr	r3, [pc, #372]	; (80040b8 <HAL_GPIO_Init+0x30c>)
 8003f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f4e:	4a5b      	ldr	r2, [pc, #364]	; (80040bc <HAL_GPIO_Init+0x310>)
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	089b      	lsrs	r3, r3, #2
 8003f54:	3302      	adds	r3, #2
 8003f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	220f      	movs	r2, #15
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a52      	ldr	r2, [pc, #328]	; (80040c0 <HAL_GPIO_Init+0x314>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d02b      	beq.n	8003fd2 <HAL_GPIO_Init+0x226>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a51      	ldr	r2, [pc, #324]	; (80040c4 <HAL_GPIO_Init+0x318>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d025      	beq.n	8003fce <HAL_GPIO_Init+0x222>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a50      	ldr	r2, [pc, #320]	; (80040c8 <HAL_GPIO_Init+0x31c>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d01f      	beq.n	8003fca <HAL_GPIO_Init+0x21e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a4f      	ldr	r2, [pc, #316]	; (80040cc <HAL_GPIO_Init+0x320>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d019      	beq.n	8003fc6 <HAL_GPIO_Init+0x21a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a4e      	ldr	r2, [pc, #312]	; (80040d0 <HAL_GPIO_Init+0x324>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d013      	beq.n	8003fc2 <HAL_GPIO_Init+0x216>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a4d      	ldr	r2, [pc, #308]	; (80040d4 <HAL_GPIO_Init+0x328>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d00d      	beq.n	8003fbe <HAL_GPIO_Init+0x212>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a4c      	ldr	r2, [pc, #304]	; (80040d8 <HAL_GPIO_Init+0x32c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d007      	beq.n	8003fba <HAL_GPIO_Init+0x20e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a4b      	ldr	r2, [pc, #300]	; (80040dc <HAL_GPIO_Init+0x330>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_GPIO_Init+0x20a>
 8003fb2:	2307      	movs	r3, #7
 8003fb4:	e00e      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fb6:	2308      	movs	r3, #8
 8003fb8:	e00c      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fba:	2306      	movs	r3, #6
 8003fbc:	e00a      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fbe:	2305      	movs	r3, #5
 8003fc0:	e008      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	e006      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e004      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fca:	2302      	movs	r3, #2
 8003fcc:	e002      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <HAL_GPIO_Init+0x228>
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	69fa      	ldr	r2, [r7, #28]
 8003fd6:	f002 0203 	and.w	r2, r2, #3
 8003fda:	0092      	lsls	r2, r2, #2
 8003fdc:	4093      	lsls	r3, r2
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fe4:	4935      	ldr	r1, [pc, #212]	; (80040bc <HAL_GPIO_Init+0x310>)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	089b      	lsrs	r3, r3, #2
 8003fea:	3302      	adds	r3, #2
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ff2:	4b3b      	ldr	r3, [pc, #236]	; (80040e0 <HAL_GPIO_Init+0x334>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	43db      	mvns	r3, r3
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	4013      	ands	r3, r2
 8004000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d003      	beq.n	8004016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	4313      	orrs	r3, r2
 8004014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004016:	4a32      	ldr	r2, [pc, #200]	; (80040e0 <HAL_GPIO_Init+0x334>)
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800401c:	4b30      	ldr	r3, [pc, #192]	; (80040e0 <HAL_GPIO_Init+0x334>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004040:	4a27      	ldr	r2, [pc, #156]	; (80040e0 <HAL_GPIO_Init+0x334>)
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004046:	4b26      	ldr	r3, [pc, #152]	; (80040e0 <HAL_GPIO_Init+0x334>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	43db      	mvns	r3, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4013      	ands	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <HAL_GPIO_Init+0x334>)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004070:	4b1b      	ldr	r3, [pc, #108]	; (80040e0 <HAL_GPIO_Init+0x334>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004094:	4a12      	ldr	r2, [pc, #72]	; (80040e0 <HAL_GPIO_Init+0x334>)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	3301      	adds	r3, #1
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	f67f ae90 	bls.w	8003dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	3724      	adds	r7, #36	; 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40023800 	.word	0x40023800
 80040bc:	40013800 	.word	0x40013800
 80040c0:	40020000 	.word	0x40020000
 80040c4:	40020400 	.word	0x40020400
 80040c8:	40020800 	.word	0x40020800
 80040cc:	40020c00 	.word	0x40020c00
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40021400 	.word	0x40021400
 80040d8:	40021800 	.word	0x40021800
 80040dc:	40021c00 	.word	0x40021c00
 80040e0:	40013c00 	.word	0x40013c00

080040e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	807b      	strh	r3, [r7, #2]
 80040f0:	4613      	mov	r3, r2
 80040f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040f4:	787b      	ldrb	r3, [r7, #1]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040fa:	887a      	ldrh	r2, [r7, #2]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004100:	e003      	b.n	800410a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004102:	887b      	ldrh	r3, [r7, #2]
 8004104:	041a      	lsls	r2, r3, #16
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	619a      	str	r2, [r3, #24]
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
	...

08004118 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d101      	bne.n	800412a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e267      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d075      	beq.n	8004222 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b04      	cmp	r3, #4
 8004140:	d00c      	beq.n	800415c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004142:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d112      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800414e:	4b82      	ldr	r3, [pc, #520]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800415a:	d10b      	bne.n	8004174 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800415c:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d05b      	beq.n	8004220 <HAL_RCC_OscConfig+0x108>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d157      	bne.n	8004220 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e242      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d106      	bne.n	800418c <HAL_RCC_OscConfig+0x74>
 800417e:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a75      	ldr	r2, [pc, #468]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e01d      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004194:	d10c      	bne.n	80041b0 <HAL_RCC_OscConfig+0x98>
 8004196:	4b70      	ldr	r3, [pc, #448]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a6f      	ldr	r2, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800419c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a6c      	ldr	r2, [pc, #432]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e00b      	b.n	80041c8 <HAL_RCC_OscConfig+0xb0>
 80041b0:	4b69      	ldr	r3, [pc, #420]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a68      	ldr	r2, [pc, #416]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	4b66      	ldr	r3, [pc, #408]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a65      	ldr	r2, [pc, #404]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d013      	beq.n	80041f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d0:	f7ff f8cc 	bl	800336c <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041d8:	f7ff f8c8 	bl	800336c <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b64      	cmp	r3, #100	; 0x64
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e207      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ea:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0xc0>
 80041f6:	e014      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f8:	f7ff f8b8 	bl	800336c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004200:	f7ff f8b4 	bl	800336c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b64      	cmp	r3, #100	; 0x64
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e1f3      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004212:	4b51      	ldr	r3, [pc, #324]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0xe8>
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004220:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d063      	beq.n	80042f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422e:	4b4a      	ldr	r3, [pc, #296]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 030c 	and.w	r3, r3, #12
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00b      	beq.n	8004252 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800423a:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004242:	2b08      	cmp	r3, #8
 8004244:	d11c      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d116      	bne.n	8004280 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004252:	4b41      	ldr	r3, [pc, #260]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d001      	beq.n	800426a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e1c7      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4937      	ldr	r1, [pc, #220]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800427a:	4313      	orrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800427e:	e03a      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d020      	beq.n	80042ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004288:	4b34      	ldr	r3, [pc, #208]	; (800435c <HAL_RCC_OscConfig+0x244>)
 800428a:	2201      	movs	r2, #1
 800428c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428e:	f7ff f86d 	bl	800336c <HAL_GetTick>
 8004292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004294:	e008      	b.n	80042a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004296:	f7ff f869 	bl	800336c <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e1a8      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042a8:	4b2b      	ldr	r3, [pc, #172]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0302 	and.w	r3, r3, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d0f0      	beq.n	8004296 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b4:	4b28      	ldr	r3, [pc, #160]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	4925      	ldr	r1, [pc, #148]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ca:	4b24      	ldr	r3, [pc, #144]	; (800435c <HAL_RCC_OscConfig+0x244>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7ff f84c 	bl	800336c <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042d8:	f7ff f848 	bl	800336c <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e187      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0308 	and.w	r3, r3, #8
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d036      	beq.n	8004370 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d016      	beq.n	8004338 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <HAL_RCC_OscConfig+0x248>)
 800430c:	2201      	movs	r2, #1
 800430e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004310:	f7ff f82c 	bl	800336c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004318:	f7ff f828 	bl	800336c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e167      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800432a:	4b0b      	ldr	r3, [pc, #44]	; (8004358 <HAL_RCC_OscConfig+0x240>)
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x200>
 8004336:	e01b      	b.n	8004370 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004338:	4b09      	ldr	r3, [pc, #36]	; (8004360 <HAL_RCC_OscConfig+0x248>)
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800433e:	f7ff f815 	bl	800336c <HAL_GetTick>
 8004342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004344:	e00e      	b.n	8004364 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004346:	f7ff f811 	bl	800336c <HAL_GetTick>
 800434a:	4602      	mov	r2, r0
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	2b02      	cmp	r3, #2
 8004352:	d907      	bls.n	8004364 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004354:	2303      	movs	r3, #3
 8004356:	e150      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004358:	40023800 	.word	0x40023800
 800435c:	42470000 	.word	0x42470000
 8004360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004364:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1ea      	bne.n	8004346 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8097 	beq.w	80044ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b81      	ldr	r3, [pc, #516]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10f      	bne.n	80043ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	4b7d      	ldr	r3, [pc, #500]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	4a7c      	ldr	r2, [pc, #496]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439c:	6413      	str	r3, [r2, #64]	; 0x40
 800439e:	4b7a      	ldr	r3, [pc, #488]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	2301      	movs	r3, #1
 80043ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043ae:	4b77      	ldr	r3, [pc, #476]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d118      	bne.n	80043ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043ba:	4b74      	ldr	r3, [pc, #464]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a73      	ldr	r2, [pc, #460]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043c6:	f7fe ffd1 	bl	800336c <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ce:	f7fe ffcd 	bl	800336c <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e10c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_OscConfig+0x474>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d106      	bne.n	8004402 <HAL_RCC_OscConfig+0x2ea>
 80043f4:	4b64      	ldr	r3, [pc, #400]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f8:	4a63      	ldr	r2, [pc, #396]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004400:	e01c      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b05      	cmp	r3, #5
 8004408:	d10c      	bne.n	8004424 <HAL_RCC_OscConfig+0x30c>
 800440a:	4b5f      	ldr	r3, [pc, #380]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800440c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440e:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004410:	f043 0304 	orr.w	r3, r3, #4
 8004414:	6713      	str	r3, [r2, #112]	; 0x70
 8004416:	4b5c      	ldr	r3, [pc, #368]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	4a5b      	ldr	r2, [pc, #364]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	6713      	str	r3, [r2, #112]	; 0x70
 8004422:	e00b      	b.n	800443c <HAL_RCC_OscConfig+0x324>
 8004424:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004428:	4a57      	ldr	r2, [pc, #348]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	6713      	str	r3, [r2, #112]	; 0x70
 8004430:	4b55      	ldr	r3, [pc, #340]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	4a54      	ldr	r2, [pc, #336]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004436:	f023 0304 	bic.w	r3, r3, #4
 800443a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d015      	beq.n	8004470 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004444:	f7fe ff92 	bl	800336c <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800444c:	f7fe ff8e 	bl	800336c <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f241 3288 	movw	r2, #5000	; 0x1388
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e0cb      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004462:	4b49      	ldr	r3, [pc, #292]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ee      	beq.n	800444c <HAL_RCC_OscConfig+0x334>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004470:	f7fe ff7c 	bl	800336c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	e00a      	b.n	800448e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004478:	f7fe ff78 	bl	800336c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	f241 3288 	movw	r2, #5000	; 0x1388
 8004486:	4293      	cmp	r3, r2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e0b5      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800448e:	4b3e      	ldr	r3, [pc, #248]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1ee      	bne.n	8004478 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800449a:	7dfb      	ldrb	r3, [r7, #23]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d105      	bne.n	80044ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044a0:	4b39      	ldr	r3, [pc, #228]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a4:	4a38      	ldr	r2, [pc, #224]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 80a1 	beq.w	80045f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044b6:	4b34      	ldr	r3, [pc, #208]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d05c      	beq.n	800457c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d141      	bne.n	800454e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ca:	4b31      	ldr	r3, [pc, #196]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 80044cc:	2200      	movs	r2, #0
 80044ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fe ff4c 	bl	800336c <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044d8:	f7fe ff48 	bl	800336c <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e087      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ea:	4b27      	ldr	r3, [pc, #156]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004504:	019b      	lsls	r3, r3, #6
 8004506:	431a      	orrs	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450c:	085b      	lsrs	r3, r3, #1
 800450e:	3b01      	subs	r3, #1
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004518:	061b      	lsls	r3, r3, #24
 800451a:	491b      	ldr	r1, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe ff21 	bl	800336c <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe ff1d 	bl	800336c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e05c      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x416>
 800454c:	e054      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x478>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe ff0a 	bl	800336c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe ff06 	bl	800336c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e045      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x470>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x444>
 800457a:	e03d      	b.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e038      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
 8004588:	40023800 	.word	0x40023800
 800458c:	40007000 	.word	0x40007000
 8004590:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004594:	4b1b      	ldr	r3, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x4ec>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d028      	beq.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d121      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d11a      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80045c4:	4013      	ands	r3, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80045ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	3b01      	subs	r3, #1
 80045de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d001      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023800 	.word	0x40023800

08004608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e0cc      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800461c:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	683a      	ldr	r2, [r7, #0]
 8004626:	429a      	cmp	r2, r3
 8004628:	d90c      	bls.n	8004644 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800462a:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	b2d2      	uxtb	r2, r2
 8004630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004632:	4b63      	ldr	r3, [pc, #396]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0307 	and.w	r3, r3, #7
 800463a:	683a      	ldr	r2, [r7, #0]
 800463c:	429a      	cmp	r2, r3
 800463e:	d001      	beq.n	8004644 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e0b8      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d020      	beq.n	8004692 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0304 	and.w	r3, r3, #4
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a58      	ldr	r2, [pc, #352]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004666:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b00      	cmp	r3, #0
 8004672:	d005      	beq.n	8004680 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800467e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b50      	ldr	r3, [pc, #320]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	494d      	ldr	r1, [pc, #308]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d044      	beq.n	8004728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d107      	bne.n	80046b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046a6:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d119      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e07f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046c2:	2b03      	cmp	r3, #3
 80046c4:	d107      	bne.n	80046d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c6:	4b3f      	ldr	r3, [pc, #252]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e06f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046d6:	4b3b      	ldr	r3, [pc, #236]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e067      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f023 0203 	bic.w	r2, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4934      	ldr	r1, [pc, #208]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046f8:	f7fe fe38 	bl	800336c <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	e00a      	b.n	8004716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004700:	f7fe fe34 	bl	800336c <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	f241 3288 	movw	r2, #5000	; 0x1388
 800470e:	4293      	cmp	r3, r2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e04f      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004716:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	f003 020c 	and.w	r2, r3, #12
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	429a      	cmp	r2, r3
 8004726:	d1eb      	bne.n	8004700 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004728:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d20c      	bcs.n	8004750 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004736:	4b22      	ldr	r3, [pc, #136]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004738:	683a      	ldr	r2, [r7, #0]
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800473e:	4b20      	ldr	r3, [pc, #128]	; (80047c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	683a      	ldr	r2, [r7, #0]
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e032      	b.n	80047b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d008      	beq.n	800476e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	4916      	ldr	r1, [pc, #88]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0308 	and.w	r3, r3, #8
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800477a:	4b12      	ldr	r3, [pc, #72]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	490e      	ldr	r1, [pc, #56]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800478e:	f000 f821 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 8004792:	4602      	mov	r2, r0
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	091b      	lsrs	r3, r3, #4
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	490a      	ldr	r1, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x1c0>)
 80047a0:	5ccb      	ldrb	r3, [r1, r3]
 80047a2:	fa22 f303 	lsr.w	r3, r2, r3
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <HAL_RCC_ClockConfig+0x1c4>)
 80047a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <HAL_RCC_ClockConfig+0x1c8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fd98 	bl	80032e4 <HAL_InitTick>

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40023c00 	.word	0x40023c00
 80047c4:	40023800 	.word	0x40023800
 80047c8:	08006f54 	.word	0x08006f54
 80047cc:	20000028 	.word	0x20000028
 80047d0:	2000002c 	.word	0x2000002c

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b094      	sub	sp, #80	; 0x50
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	2300      	movs	r3, #0
 80047e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e4:	2300      	movs	r3, #0
 80047e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b79      	ldr	r3, [pc, #484]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80e1 	bhi.w	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e0db      	b.n	80049c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b73      	ldr	r3, [pc, #460]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800480a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800480c:	e0db      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b73      	ldr	r3, [pc, #460]	; (80049dc <HAL_RCC_GetSysClockFreq+0x208>)
 8004810:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004812:	e0d8      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b6f      	ldr	r3, [pc, #444]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b6d      	ldr	r3, [pc, #436]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d063      	beq.n	80048f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b6a      	ldr	r3, [pc, #424]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	63bb      	str	r3, [r7, #56]	; 0x38
 8004834:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483c:	633b      	str	r3, [r7, #48]	; 0x30
 800483e:	2300      	movs	r3, #0
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
 8004842:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004846:	4622      	mov	r2, r4
 8004848:	462b      	mov	r3, r5
 800484a:	f04f 0000 	mov.w	r0, #0
 800484e:	f04f 0100 	mov.w	r1, #0
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004858:	0150      	lsls	r0, r2, #5
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4621      	mov	r1, r4
 8004860:	1a51      	subs	r1, r2, r1
 8004862:	6139      	str	r1, [r7, #16]
 8004864:	4629      	mov	r1, r5
 8004866:	eb63 0301 	sbc.w	r3, r3, r1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004878:	4659      	mov	r1, fp
 800487a:	018b      	lsls	r3, r1, #6
 800487c:	4651      	mov	r1, sl
 800487e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004882:	4651      	mov	r1, sl
 8004884:	018a      	lsls	r2, r1, #6
 8004886:	4651      	mov	r1, sl
 8004888:	ebb2 0801 	subs.w	r8, r2, r1
 800488c:	4659      	mov	r1, fp
 800488e:	eb63 0901 	sbc.w	r9, r3, r1
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800489e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048a6:	4690      	mov	r8, r2
 80048a8:	4699      	mov	r9, r3
 80048aa:	4623      	mov	r3, r4
 80048ac:	eb18 0303 	adds.w	r3, r8, r3
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	462b      	mov	r3, r5
 80048b4:	eb49 0303 	adc.w	r3, r9, r3
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	f04f 0200 	mov.w	r2, #0
 80048be:	f04f 0300 	mov.w	r3, #0
 80048c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048c6:	4629      	mov	r1, r5
 80048c8:	024b      	lsls	r3, r1, #9
 80048ca:	4621      	mov	r1, r4
 80048cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048d0:	4621      	mov	r1, r4
 80048d2:	024a      	lsls	r2, r1, #9
 80048d4:	4610      	mov	r0, r2
 80048d6:	4619      	mov	r1, r3
 80048d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048da:	2200      	movs	r2, #0
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80048de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048e4:	f7fc f90e 	bl	8000b04 <__aeabi_uldivmod>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4613      	mov	r3, r2
 80048ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f0:	e058      	b.n	80049a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f2:	4b38      	ldr	r3, [pc, #224]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	2200      	movs	r2, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	4611      	mov	r1, r2
 80048fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004902:	623b      	str	r3, [r7, #32]
 8004904:	2300      	movs	r3, #0
 8004906:	627b      	str	r3, [r7, #36]	; 0x24
 8004908:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800490c:	4642      	mov	r2, r8
 800490e:	464b      	mov	r3, r9
 8004910:	f04f 0000 	mov.w	r0, #0
 8004914:	f04f 0100 	mov.w	r1, #0
 8004918:	0159      	lsls	r1, r3, #5
 800491a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800491e:	0150      	lsls	r0, r2, #5
 8004920:	4602      	mov	r2, r0
 8004922:	460b      	mov	r3, r1
 8004924:	4641      	mov	r1, r8
 8004926:	ebb2 0a01 	subs.w	sl, r2, r1
 800492a:	4649      	mov	r1, r9
 800492c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800493c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004940:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004944:	ebb2 040a 	subs.w	r4, r2, sl
 8004948:	eb63 050b 	sbc.w	r5, r3, fp
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	00eb      	lsls	r3, r5, #3
 8004956:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495a:	00e2      	lsls	r2, r4, #3
 800495c:	4614      	mov	r4, r2
 800495e:	461d      	mov	r5, r3
 8004960:	4643      	mov	r3, r8
 8004962:	18e3      	adds	r3, r4, r3
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	464b      	mov	r3, r9
 8004968:	eb45 0303 	adc.w	r3, r5, r3
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4500 	ldrd	r4, r5, [r7]
 800497a:	4629      	mov	r1, r5
 800497c:	028b      	lsls	r3, r1, #10
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004984:	4621      	mov	r1, r4
 8004986:	028a      	lsls	r2, r1, #10
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	61fa      	str	r2, [r7, #28]
 8004994:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004998:	f7fc f8b4 	bl	8000b04 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80049a4:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	0c1b      	lsrs	r3, r3, #16
 80049aa:	f003 0303 	and.w	r3, r3, #3
 80049ae:	3301      	adds	r3, #1
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80049b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049be:	e002      	b.n	80049c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049c0:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80049c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3750      	adds	r7, #80	; 0x50
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049d2:	bf00      	nop
 80049d4:	40023800 	.word	0x40023800
 80049d8:	00f42400 	.word	0x00f42400
 80049dc:	007a1200 	.word	0x007a1200

080049e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80049e6:	681b      	ldr	r3, [r3, #0]
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	20000028 	.word	0x20000028

080049f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049fc:	f7ff fff0 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a00:	4602      	mov	r2, r0
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	0a9b      	lsrs	r3, r3, #10
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	4903      	ldr	r1, [pc, #12]	; (8004a1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a0e:	5ccb      	ldrb	r3, [r1, r3]
 8004a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40023800 	.word	0x40023800
 8004a1c:	08006f64 	.word	0x08006f64

08004a20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004a24:	f7ff ffdc 	bl	80049e0 <HAL_RCC_GetHCLKFreq>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	0b5b      	lsrs	r3, r3, #13
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	4903      	ldr	r1, [pc, #12]	; (8004a44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a36:	5ccb      	ldrb	r3, [r1, r3]
 8004a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	40023800 	.word	0x40023800
 8004a44:	08006f64 	.word	0x08006f64

08004a48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e041      	b.n	8004ade <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fe fa26 	bl	8002ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2202      	movs	r2, #2
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	3304      	adds	r3, #4
 8004a84:	4619      	mov	r1, r3
 8004a86:	4610      	mov	r0, r2
 8004a88:	f000 fcdc 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d001      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04e      	b.n	8004b9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68da      	ldr	r2, [r3, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a23      	ldr	r2, [pc, #140]	; (8004bac <HAL_TIM_Base_Start_IT+0xc4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d01d      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1c      	ldr	r2, [pc, #112]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <HAL_TIM_Base_Start_IT+0xd4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_TIM_Base_Start_IT+0x80>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d111      	bne.n	8004b8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0307 	and.w	r3, r3, #7
 8004b72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2b06      	cmp	r3, #6
 8004b78:	d010      	beq.n	8004b9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0201 	orr.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8a:	e007      	b.n	8004b9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f042 0201 	orr.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40001800 	.word	0x40001800

08004bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e041      	b.n	8004c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d106      	bne.n	8004bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f7fe f9ac 	bl	8002f4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4619      	mov	r1, r3
 8004c06:	4610      	mov	r0, r2
 8004c08:	f000 fc1c 	bl	8005444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <HAL_TIM_PWM_Start+0x24>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	bf14      	ite	ne
 8004c84:	2301      	movne	r3, #1
 8004c86:	2300      	moveq	r3, #0
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	e022      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x6a>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	2b04      	cmp	r3, #4
 8004c90:	d109      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0x3e>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	bf14      	ite	ne
 8004c9e:	2301      	movne	r3, #1
 8004ca0:	2300      	moveq	r3, #0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	e015      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x6a>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d109      	bne.n	8004cc0 <HAL_TIM_PWM_Start+0x58>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	bf14      	ite	ne
 8004cb8:	2301      	movne	r3, #1
 8004cba:	2300      	moveq	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	e008      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x6a>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e07c      	b.n	8004dd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_PWM_Start+0x82>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce8:	e013      	b.n	8004d12 <HAL_TIM_PWM_Start+0xaa>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_PWM_Start+0x92>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf8:	e00b      	b.n	8004d12 <HAL_TIM_PWM_Start+0xaa>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_PWM_Start+0xa2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2202      	movs	r2, #2
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d08:	e003      	b.n	8004d12 <HAL_TIM_PWM_Start+0xaa>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2201      	movs	r2, #1
 8004d18:	6839      	ldr	r1, [r7, #0]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fde2 	bl	80058e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <HAL_TIM_PWM_Start+0x174>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_TIM_PWM_Start+0xcc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a2c      	ldr	r2, [pc, #176]	; (8004de0 <HAL_TIM_PWM_Start+0x178>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d101      	bne.n	8004d38 <HAL_TIM_PWM_Start+0xd0>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <HAL_TIM_PWM_Start+0xd2>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d007      	beq.n	8004d4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a22      	ldr	r2, [pc, #136]	; (8004ddc <HAL_TIM_PWM_Start+0x174>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d022      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d60:	d01d      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <HAL_TIM_PWM_Start+0x17c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d018      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a1d      	ldr	r2, [pc, #116]	; (8004de8 <HAL_TIM_PWM_Start+0x180>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d013      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <HAL_TIM_PWM_Start+0x184>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d00e      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <HAL_TIM_PWM_Start+0x178>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d009      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a18      	ldr	r2, [pc, #96]	; (8004df0 <HAL_TIM_PWM_Start+0x188>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d004      	beq.n	8004d9e <HAL_TIM_PWM_Start+0x136>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a16      	ldr	r2, [pc, #88]	; (8004df4 <HAL_TIM_PWM_Start+0x18c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d111      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b06      	cmp	r3, #6
 8004dae:	d010      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0201 	orr.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dc0:	e007      	b.n	8004dd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f042 0201 	orr.w	r2, r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40010400 	.word	0x40010400
 8004de4:	40000400 	.word	0x40000400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40014000 	.word	0x40014000
 8004df4:	40001800 	.word	0x40001800

08004df8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e097      	b.n	8004f3c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d106      	bne.n	8004e26 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fd ffcf 	bl	8002dc4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e3c:	f023 0307 	bic.w	r3, r3, #7
 8004e40:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f000 faf9 	bl	8005444 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7a:	f023 0303 	bic.w	r3, r3, #3
 8004e7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	689a      	ldr	r2, [r3, #8]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e98:	f023 030c 	bic.w	r3, r3, #12
 8004e9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ea4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ea8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	011a      	lsls	r2, r3, #4
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	031b      	lsls	r3, r3, #12
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ed6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004ede:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	4313      	orrs	r3, r2
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3718      	adds	r7, #24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f54:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f5c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f64:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f6c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d110      	bne.n	8004f96 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f74:	7bfb      	ldrb	r3, [r7, #15]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d102      	bne.n	8004f80 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f7a:	7b7b      	ldrb	r3, [r7, #13]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d001      	beq.n	8004f84 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e069      	b.n	8005058 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2202      	movs	r2, #2
 8004f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	e031      	b.n	8004ffa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d110      	bne.n	8004fbe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f9c:	7bbb      	ldrb	r3, [r7, #14]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d102      	bne.n	8004fa8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fa2:	7b3b      	ldrb	r3, [r7, #12]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d001      	beq.n	8004fac <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e055      	b.n	8005058 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fbc:	e01d      	b.n	8004ffa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d108      	bne.n	8004fd6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fc4:	7bbb      	ldrb	r3, [r7, #14]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d105      	bne.n	8004fd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fca:	7b7b      	ldrb	r3, [r7, #13]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fd0:	7b3b      	ldrb	r3, [r7, #12]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d001      	beq.n	8004fda <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e03e      	b.n	8005058 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2202      	movs	r2, #2
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2202      	movs	r2, #2
 8004ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d003      	beq.n	8005008 <HAL_TIM_Encoder_Start+0xc4>
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b04      	cmp	r3, #4
 8005004:	d008      	beq.n	8005018 <HAL_TIM_Encoder_Start+0xd4>
 8005006:	e00f      	b.n	8005028 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2201      	movs	r2, #1
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fc67 	bl	80058e4 <TIM_CCxChannelCmd>
      break;
 8005016:	e016      	b.n	8005046 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2201      	movs	r2, #1
 800501e:	2104      	movs	r1, #4
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fc5f 	bl	80058e4 <TIM_CCxChannelCmd>
      break;
 8005026:	e00e      	b.n	8005046 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	2201      	movs	r2, #1
 800502e:	2100      	movs	r1, #0
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fc57 	bl	80058e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2201      	movs	r2, #1
 800503c:	2104      	movs	r1, #4
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fc50 	bl	80058e4 <TIM_CCxChannelCmd>
      break;
 8005044:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b02      	cmp	r3, #2
 8005074:	d122      	bne.n	80050bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b02      	cmp	r3, #2
 8005082:	d11b      	bne.n	80050bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0202 	mvn.w	r2, #2
 800508c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	f003 0303 	and.w	r3, r3, #3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d003      	beq.n	80050aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f9b0 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 80050a8:	e005      	b.n	80050b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f9a2 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9b3 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d122      	bne.n	8005110 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d11b      	bne.n	8005110 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f06f 0204 	mvn.w	r2, #4
 80050e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f986 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 80050fc:	e005      	b.n	800510a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f978 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f989 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0308 	and.w	r3, r3, #8
 800511a:	2b08      	cmp	r3, #8
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b08      	cmp	r3, #8
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0208 	mvn.w	r2, #8
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2204      	movs	r2, #4
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f95c 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f94e 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f95f 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b10      	cmp	r3, #16
 8005170:	d122      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b10      	cmp	r3, #16
 800517e:	d11b      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0210 	mvn.w	r2, #16
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2208      	movs	r2, #8
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f932 	bl	8005408 <HAL_TIM_IC_CaptureCallback>
 80051a4:	e005      	b.n	80051b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f924 	bl	80053f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f935 	bl	800541c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0301 	and.w	r3, r3, #1
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0201 	mvn.w	r2, #1
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7fc fa3e 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ee:	2b80      	cmp	r3, #128	; 0x80
 80051f0:	d10e      	bne.n	8005210 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fc:	2b80      	cmp	r3, #128	; 0x80
 80051fe:	d107      	bne.n	8005210 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fc68 	bl	8005ae0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	d10e      	bne.n	800523c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d107      	bne.n	800523c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f8fa 	bl	8005430 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b20      	cmp	r3, #32
 8005248:	d10e      	bne.n	8005268 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0320 	and.w	r3, r3, #32
 8005254:	2b20      	cmp	r3, #32
 8005256:	d107      	bne.n	8005268 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0220 	mvn.w	r2, #32
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 fc32 	bl	8005acc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005268:	bf00      	nop
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800528a:	2302      	movs	r3, #2
 800528c:	e0ae      	b.n	80053ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b0c      	cmp	r3, #12
 800529a:	f200 809f 	bhi.w	80053dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800529e:	a201      	add	r2, pc, #4	; (adr r2, 80052a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a4:	080052d9 	.word	0x080052d9
 80052a8:	080053dd 	.word	0x080053dd
 80052ac:	080053dd 	.word	0x080053dd
 80052b0:	080053dd 	.word	0x080053dd
 80052b4:	08005319 	.word	0x08005319
 80052b8:	080053dd 	.word	0x080053dd
 80052bc:	080053dd 	.word	0x080053dd
 80052c0:	080053dd 	.word	0x080053dd
 80052c4:	0800535b 	.word	0x0800535b
 80052c8:	080053dd 	.word	0x080053dd
 80052cc:	080053dd 	.word	0x080053dd
 80052d0:	080053dd 	.word	0x080053dd
 80052d4:	0800539b 	.word	0x0800539b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	4618      	mov	r0, r3
 80052e0:	f000 f950 	bl	8005584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699a      	ldr	r2, [r3, #24]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0208 	orr.w	r2, r2, #8
 80052f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	699a      	ldr	r2, [r3, #24]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f022 0204 	bic.w	r2, r2, #4
 8005302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6999      	ldr	r1, [r3, #24]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	691a      	ldr	r2, [r3, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	619a      	str	r2, [r3, #24]
      break;
 8005316:	e064      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68b9      	ldr	r1, [r7, #8]
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f9a0 	bl	8005664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699a      	ldr	r2, [r3, #24]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005332:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699a      	ldr	r2, [r3, #24]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6999      	ldr	r1, [r3, #24]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	021a      	lsls	r2, r3, #8
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	619a      	str	r2, [r3, #24]
      break;
 8005358:	e043      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	4618      	mov	r0, r3
 8005362:	f000 f9f5 	bl	8005750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0208 	orr.w	r2, r2, #8
 8005374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69da      	ldr	r2, [r3, #28]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0204 	bic.w	r2, r2, #4
 8005384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69d9      	ldr	r1, [r3, #28]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	61da      	str	r2, [r3, #28]
      break;
 8005398:	e023      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68b9      	ldr	r1, [r7, #8]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fa49 	bl	8005838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69da      	ldr	r2, [r3, #28]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69d9      	ldr	r1, [r3, #28]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	021a      	lsls	r2, r3, #8
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	61da      	str	r2, [r3, #28]
      break;
 80053da:	e002      	b.n	80053e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	75fb      	strb	r3, [r7, #23]
      break;
 80053e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3718      	adds	r7, #24
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053fc:	bf00      	nop
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a40      	ldr	r2, [pc, #256]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005462:	d00f      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3d      	ldr	r2, [pc, #244]	; (800555c <TIM_Base_SetConfig+0x118>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3c      	ldr	r2, [pc, #240]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3b      	ldr	r2, [pc, #236]	; (8005564 <TIM_Base_SetConfig+0x120>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x40>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a3a      	ldr	r2, [pc, #232]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2f      	ldr	r2, [pc, #188]	; (8005558 <TIM_Base_SetConfig+0x114>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d02b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d027      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2c      	ldr	r2, [pc, #176]	; (800555c <TIM_Base_SetConfig+0x118>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d023      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	; (8005560 <TIM_Base_SetConfig+0x11c>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a2a      	ldr	r2, [pc, #168]	; (8005564 <TIM_Base_SetConfig+0x120>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d01b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a29      	ldr	r2, [pc, #164]	; (8005568 <TIM_Base_SetConfig+0x124>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d017      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <TIM_Base_SetConfig+0x128>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a27      	ldr	r2, [pc, #156]	; (8005570 <TIM_Base_SetConfig+0x12c>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00f      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a26      	ldr	r2, [pc, #152]	; (8005574 <TIM_Base_SetConfig+0x130>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00b      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <TIM_Base_SetConfig+0x134>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d007      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a24      	ldr	r2, [pc, #144]	; (800557c <TIM_Base_SetConfig+0x138>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d003      	beq.n	80054f6 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a23      	ldr	r2, [pc, #140]	; (8005580 <TIM_Base_SetConfig+0x13c>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d108      	bne.n	8005508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4313      	orrs	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	4313      	orrs	r3, r2
 8005514:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0a      	ldr	r2, [pc, #40]	; (8005558 <TIM_Base_SetConfig+0x114>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d003      	beq.n	800553c <TIM_Base_SetConfig+0xf8>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <TIM_Base_SetConfig+0x124>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d103      	bne.n	8005544 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	615a      	str	r2, [r3, #20]
}
 800554a:	bf00      	nop
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40010000 	.word	0x40010000
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40010400 	.word	0x40010400
 800556c:	40014000 	.word	0x40014000
 8005570:	40014400 	.word	0x40014400
 8005574:	40014800 	.word	0x40014800
 8005578:	40001800 	.word	0x40001800
 800557c:	40001c00 	.word	0x40001c00
 8005580:	40002000 	.word	0x40002000

08005584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
 800558c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a1b      	ldr	r3, [r3, #32]
 800559e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0303 	bic.w	r3, r3, #3
 80055ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f023 0302 	bic.w	r3, r3, #2
 80055cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a20      	ldr	r2, [pc, #128]	; (800565c <TIM_OC1_SetConfig+0xd8>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_OC1_SetConfig+0x64>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <TIM_OC1_SetConfig+0xdc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d10c      	bne.n	8005602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0308 	bic.w	r3, r3, #8
 80055ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	697a      	ldr	r2, [r7, #20]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f023 0304 	bic.w	r3, r3, #4
 8005600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a15      	ldr	r2, [pc, #84]	; (800565c <TIM_OC1_SetConfig+0xd8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <TIM_OC1_SetConfig+0x8e>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a14      	ldr	r2, [pc, #80]	; (8005660 <TIM_OC1_SetConfig+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d111      	bne.n	8005636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	695b      	ldr	r3, [r3, #20]
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	699b      	ldr	r3, [r3, #24]
 8005630:	693a      	ldr	r2, [r7, #16]
 8005632:	4313      	orrs	r3, r2
 8005634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	693a      	ldr	r2, [r7, #16]
 800563a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	40010000 	.word	0x40010000
 8005660:	40010400 	.word	0x40010400

08005664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005664:	b480      	push	{r7}
 8005666:	b087      	sub	sp, #28
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a1b      	ldr	r3, [r3, #32]
 8005672:	f023 0210 	bic.w	r2, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800569a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0320 	bic.w	r3, r3, #32
 80056ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	011b      	lsls	r3, r3, #4
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a22      	ldr	r2, [pc, #136]	; (8005748 <TIM_OC2_SetConfig+0xe4>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_OC2_SetConfig+0x68>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a21      	ldr	r2, [pc, #132]	; (800574c <TIM_OC2_SetConfig+0xe8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d10d      	bne.n	80056e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a17      	ldr	r2, [pc, #92]	; (8005748 <TIM_OC2_SetConfig+0xe4>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC2_SetConfig+0x94>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a16      	ldr	r2, [pc, #88]	; (800574c <TIM_OC2_SetConfig+0xe8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d113      	bne.n	8005720 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40010000 	.word	0x40010000
 800574c:	40010400 	.word	0x40010400

08005750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a21      	ldr	r2, [pc, #132]	; (8005830 <TIM_OC3_SetConfig+0xe0>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_OC3_SetConfig+0x66>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a20      	ldr	r2, [pc, #128]	; (8005834 <TIM_OC3_SetConfig+0xe4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d10d      	bne.n	80057d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	697a      	ldr	r2, [r7, #20]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a16      	ldr	r2, [pc, #88]	; (8005830 <TIM_OC3_SetConfig+0xe0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d003      	beq.n	80057e2 <TIM_OC3_SetConfig+0x92>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <TIM_OC3_SetConfig+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d113      	bne.n	800580a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	011b      	lsls	r3, r3, #4
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	621a      	str	r2, [r3, #32]
}
 8005824:	bf00      	nop
 8005826:	371c      	adds	r7, #28
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	40010000 	.word	0x40010000
 8005834:	40010400 	.word	0x40010400

08005838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800586e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	021b      	lsls	r3, r3, #8
 8005876:	68fa      	ldr	r2, [r7, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	031b      	lsls	r3, r3, #12
 800588a:	693a      	ldr	r2, [r7, #16]
 800588c:	4313      	orrs	r3, r2
 800588e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a12      	ldr	r2, [pc, #72]	; (80058dc <TIM_OC4_SetConfig+0xa4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d003      	beq.n	80058a0 <TIM_OC4_SetConfig+0x68>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a11      	ldr	r2, [pc, #68]	; (80058e0 <TIM_OC4_SetConfig+0xa8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d109      	bne.n	80058b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	019b      	lsls	r3, r3, #6
 80058ae:	697a      	ldr	r2, [r7, #20]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	693a      	ldr	r2, [r7, #16]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40010000 	.word	0x40010000
 80058e0:	40010400 	.word	0x40010400

080058e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	f003 031f 	and.w	r3, r3, #31
 80058f6:	2201      	movs	r2, #1
 80058f8:	fa02 f303 	lsl.w	r3, r2, r3
 80058fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1a      	ldr	r2, [r3, #32]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	43db      	mvns	r3, r3
 8005906:	401a      	ands	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6a1a      	ldr	r2, [r3, #32]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	f003 031f 	and.w	r3, r3, #31
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	fa01 f303 	lsl.w	r3, r1, r3
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	621a      	str	r2, [r3, #32]
}
 8005922:	bf00      	nop
 8005924:	371c      	adds	r7, #28
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
	...

08005930 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005940:	2b01      	cmp	r3, #1
 8005942:	d101      	bne.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005944:	2302      	movs	r3, #2
 8005946:	e05a      	b.n	80059fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2202      	movs	r2, #2
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a21      	ldr	r2, [pc, #132]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d022      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005994:	d01d      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a1d      	ldr	r2, [pc, #116]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d018      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d013      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1a      	ldr	r2, [pc, #104]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00e      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d009      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d004      	beq.n	80059d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d10c      	bne.n	80059ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	40010400 	.word	0x40010400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40001800 	.word	0x40001800

08005a28 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005a32:	2300      	movs	r3, #0
 8005a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d101      	bne.n	8005a44 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005a40:	2302      	movs	r3, #2
 8005a42:	e03d      	b.n	8005ac0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	4313      	orrs	r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e03f      	b.n	8005b86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d106      	bne.n	8005b20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7fd fa72 	bl	8003004 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	; 0x24
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68da      	ldr	r2, [r3, #12]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 ff5f 	bl	80069fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	695a      	ldr	r2, [r3, #20]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3708      	adds	r7, #8
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b08a      	sub	sp, #40	; 0x28
 8005b92:	af02      	add	r7, sp, #8
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	603b      	str	r3, [r7, #0]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	2b20      	cmp	r3, #32
 8005bac:	d17c      	bne.n	8005ca8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_UART_Transmit+0x2c>
 8005bb4:	88fb      	ldrh	r3, [r7, #6]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e075      	b.n	8005caa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d101      	bne.n	8005bcc <HAL_UART_Transmit+0x3e>
 8005bc8:	2302      	movs	r3, #2
 8005bca:	e06e      	b.n	8005caa <HAL_UART_Transmit+0x11c>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2221      	movs	r2, #33	; 0x21
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005be2:	f7fd fbc3 	bl	800336c <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d108      	bne.n	8005c10 <HAL_UART_Transmit+0x82>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d104      	bne.n	8005c10 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c06:	2300      	movs	r3, #0
 8005c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	e003      	b.n	8005c18 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c20:	e02a      	b.n	8005c78 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2180      	movs	r1, #128	; 0x80
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fc17 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e036      	b.n	8005caa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10b      	bne.n	8005c5a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	3302      	adds	r3, #2
 8005c56:	61bb      	str	r3, [r7, #24]
 8005c58:	e007      	b.n	8005c6a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	781a      	ldrb	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1cf      	bne.n	8005c22 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	9300      	str	r3, [sp, #0]
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2140      	movs	r1, #64	; 0x40
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f000 fbe7 	bl	8006460 <UART_WaitOnFlagUntilTimeout>
 8005c92:	4603      	mov	r3, r0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d001      	beq.n	8005c9c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e006      	b.n	8005caa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	e000      	b.n	8005caa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3720      	adds	r7, #32
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	60f8      	str	r0, [r7, #12]
 8005cba:	60b9      	str	r1, [r7, #8]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d11d      	bne.n	8005d08 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d002      	beq.n	8005cd8 <HAL_UART_Receive_DMA+0x26>
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e016      	b.n	8005d0a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d101      	bne.n	8005cea <HAL_UART_Receive_DMA+0x38>
 8005ce6:	2302      	movs	r3, #2
 8005ce8:	e00f      	b.n	8005d0a <HAL_UART_Receive_DMA+0x58>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005cf8:	88fb      	ldrh	r3, [r7, #6]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68b9      	ldr	r1, [r7, #8]
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 fc1c 	bl	800653c <UART_Start_Receive_DMA>
 8005d04:	4603      	mov	r3, r0
 8005d06:	e000      	b.n	8005d0a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
  }
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
	...

08005d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b0ba      	sub	sp, #232	; 0xe8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10f      	bne.n	8005d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d009      	beq.n	8005d7a <HAL_UART_IRQHandler+0x66>
 8005d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d6a:	f003 0320 	and.w	r3, r3, #32
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fd87 	bl	8006886 <UART_Receive_IT>
      return;
 8005d78:	e256      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 80de 	beq.w	8005f40 <HAL_UART_IRQHandler+0x22c>
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f000 80d1 	beq.w	8005f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da2:	f003 0301 	and.w	r3, r3, #1
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00b      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xae>
 8005daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f043 0201 	orr.w	r2, r3, #1
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00b      	beq.n	8005de6 <HAL_UART_IRQHandler+0xd2>
 8005dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d005      	beq.n	8005de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	f043 0202 	orr.w	r2, r3, #2
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dea:	f003 0302 	and.w	r3, r3, #2
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <HAL_UART_IRQHandler+0xf6>
 8005df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	f043 0204 	orr.w	r2, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e0e:	f003 0308 	and.w	r3, r3, #8
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d011      	beq.n	8005e3a <HAL_UART_IRQHandler+0x126>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d005      	beq.n	8005e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f043 0208 	orr.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 81ed 	beq.w	800621e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e48:	f003 0320 	and.w	r3, r3, #32
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d008      	beq.n	8005e62 <HAL_UART_IRQHandler+0x14e>
 8005e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e54:	f003 0320 	and.w	r3, r3, #32
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fd12 	bl	8006886 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d103      	bne.n	8005e8e <HAL_UART_IRQHandler+0x17a>
 8005e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d04f      	beq.n	8005f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fc1a 	bl	80066c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	695b      	ldr	r3, [r3, #20]
 8005e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9e:	2b40      	cmp	r3, #64	; 0x40
 8005ea0:	d141      	bne.n	8005f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3314      	adds	r3, #20
 8005ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005eb0:	e853 3f00 	ldrex	r3, [r3]
 8005eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1d9      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d013      	beq.n	8005f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efa:	4a7d      	ldr	r2, [pc, #500]	; (80060f0 <HAL_UART_IRQHandler+0x3dc>)
 8005efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7fd fcc6 	bl	8003894 <HAL_DMA_Abort_IT>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	e00e      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f990 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f24:	e00a      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f98c 	bl	8006244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f2c:	e006      	b.n	8005f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f988 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f3a:	e170      	b.n	800621e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	bf00      	nop
    return;
 8005f3e:	e16e      	b.n	800621e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 814a 	bne.w	80061de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8143 	beq.w	80061de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 813c 	beq.w	80061de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f66:	2300      	movs	r3, #0
 8005f68:	60bb      	str	r3, [r7, #8]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695b      	ldr	r3, [r3, #20]
 8005f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f86:	2b40      	cmp	r3, #64	; 0x40
 8005f88:	f040 80b4 	bne.w	80060f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8140 	beq.w	8006222 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005faa:	429a      	cmp	r2, r3
 8005fac:	f080 8139 	bcs.w	8006222 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	69db      	ldr	r3, [r3, #28]
 8005fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc2:	f000 8088 	beq.w	80060d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	330c      	adds	r3, #12
 8005fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800600a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1d9      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3314      	adds	r3, #20
 8006032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800603a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800603e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e1      	bne.n	8006012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3314      	adds	r3, #20
 8006054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800605e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	3314      	adds	r3, #20
 800606e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e3      	bne.n	800604e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2220      	movs	r2, #32
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	330c      	adds	r3, #12
 800609a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a6:	f023 0310 	bic.w	r3, r3, #16
 80060aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	330c      	adds	r3, #12
 80060b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80060b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80060ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060c0:	e841 2300 	strex	r3, r2, [r1]
 80060c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1e3      	bne.n	8006094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fd fb6f 	bl	80037b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060de:	b29b      	uxth	r3, r3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f8b6 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80060ec:	e099      	b.n	8006222 <HAL_UART_IRQHandler+0x50e>
 80060ee:	bf00      	nop
 80060f0:	0800678f 	.word	0x0800678f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	1ad3      	subs	r3, r2, r3
 8006100:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006108:	b29b      	uxth	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	f000 808b 	beq.w	8006226 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006114:	2b00      	cmp	r3, #0
 8006116:	f000 8086 	beq.w	8006226 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006124:	e853 3f00 	ldrex	r3, [r3]
 8006128:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800613e:	647a      	str	r2, [r7, #68]	; 0x44
 8006140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006146:	e841 2300 	strex	r3, r2, [r1]
 800614a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800614c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1e3      	bne.n	800611a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	623b      	str	r3, [r7, #32]
   return(result);
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	f023 0301 	bic.w	r3, r3, #1
 8006168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	3314      	adds	r3, #20
 8006172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006176:	633a      	str	r2, [r7, #48]	; 0x30
 8006178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e3      	bne.n	8006152 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2220      	movs	r2, #32
 800618e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0310 	bic.w	r3, r3, #16
 80061ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	330c      	adds	r3, #12
 80061b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80061bc:	61fa      	str	r2, [r7, #28]
 80061be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	69b9      	ldr	r1, [r7, #24]
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	617b      	str	r3, [r7, #20]
   return(result);
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e3      	bne.n	8006198 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f83e 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061dc:	e023      	b.n	8006226 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d009      	beq.n	80061fe <HAL_UART_IRQHandler+0x4ea>
 80061ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fadd 	bl	80067b6 <UART_Transmit_IT>
    return;
 80061fc:	e014      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00e      	beq.n	8006228 <HAL_UART_IRQHandler+0x514>
 800620a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800620e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006212:	2b00      	cmp	r3, #0
 8006214:	d008      	beq.n	8006228 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb1d 	bl	8006856 <UART_EndTransmit_IT>
    return;
 800621c:	e004      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
    return;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
      return;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <HAL_UART_IRQHandler+0x514>
      return;
 8006226:	bf00      	nop
  }
}
 8006228:	37e8      	adds	r7, #232	; 0xe8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop

08006230 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b09c      	sub	sp, #112	; 0x70
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	2b00      	cmp	r3, #0
 800628a:	d172      	bne.n	8006372 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800628c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628e:	2200      	movs	r2, #0
 8006290:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006292:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80062aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80062b2:	65ba      	str	r2, [r7, #88]	; 0x58
 80062b4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3314      	adds	r3, #20
 80062cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	667b      	str	r3, [r7, #100]	; 0x64
 80062de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3314      	adds	r3, #20
 80062e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80062e6:	647a      	str	r2, [r7, #68]	; 0x44
 80062e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	3314      	adds	r3, #20
 8006300:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006304:	e853 3f00 	ldrex	r3, [r3]
 8006308:	623b      	str	r3, [r7, #32]
   return(result);
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006310:	663b      	str	r3, [r7, #96]	; 0x60
 8006312:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3314      	adds	r3, #20
 8006318:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800631a:	633a      	str	r2, [r7, #48]	; 0x30
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e5      	bne.n	80062fa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800632e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006330:	2220      	movs	r2, #32
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800633a:	2b01      	cmp	r3, #1
 800633c:	d119      	bne.n	8006372 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	330c      	adds	r3, #12
 8006344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	60fb      	str	r3, [r7, #12]
   return(result);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f023 0310 	bic.w	r3, r3, #16
 8006354:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	330c      	adds	r3, #12
 800635c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800635e:	61fa      	str	r2, [r7, #28]
 8006360:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	69b9      	ldr	r1, [r7, #24]
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	617b      	str	r3, [r7, #20]
   return(result);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006376:	2b01      	cmp	r3, #1
 8006378:	d106      	bne.n	8006388 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800637a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800637e:	4619      	mov	r1, r3
 8006380:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006382:	f7ff ff69 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006386:	e002      	b.n	800638e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006388:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800638a:	f7fb f895 	bl	80014b8 <HAL_UART_RxCpltCallback>
}
 800638e:	bf00      	nop
 8006390:	3770      	adds	r7, #112	; 0x70
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d108      	bne.n	80063be <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80063b0:	085b      	lsrs	r3, r3, #1
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	4619      	mov	r1, r3
 80063b6:	68f8      	ldr	r0, [r7, #12]
 80063b8:	f7ff ff4e 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063bc:	e002      	b.n	80063c4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7ff ff36 	bl	8006230 <HAL_UART_RxHalfCpltCallback>
}
 80063c4:	bf00      	nop
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b21      	cmp	r3, #33	; 0x21
 80063fe:	d108      	bne.n	8006412 <UART_DMAError+0x46>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d005      	beq.n	8006412 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2200      	movs	r2, #0
 800640a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800640c:	68b8      	ldr	r0, [r7, #8]
 800640e:	f000 f933 	bl	8006678 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	695b      	ldr	r3, [r3, #20]
 8006418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b22      	cmp	r3, #34	; 0x22
 8006432:	d108      	bne.n	8006446 <UART_DMAError+0x7a>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006440:	68b8      	ldr	r0, [r7, #8]
 8006442:	f000 f941 	bl	80066c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0210 	orr.w	r2, r3, #16
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006452:	68b8      	ldr	r0, [r7, #8]
 8006454:	f7ff fef6 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006458:	bf00      	nop
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b090      	sub	sp, #64	; 0x40
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	4613      	mov	r3, r2
 800646e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006470:	e050      	b.n	8006514 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006478:	d04c      	beq.n	8006514 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800647a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <UART_WaitOnFlagUntilTimeout+0x30>
 8006480:	f7fc ff74 	bl	800336c <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800648c:	429a      	cmp	r2, r3
 800648e:	d241      	bcs.n	8006514 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	e853 3f00 	ldrex	r3, [r3]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064b0:	637a      	str	r2, [r7, #52]	; 0x34
 80064b2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80064b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064b8:	e841 2300 	strex	r3, r2, [r1]
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d1e5      	bne.n	8006490 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3314      	adds	r3, #20
 80064ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	e853 3f00 	ldrex	r3, [r3]
 80064d2:	613b      	str	r3, [r7, #16]
   return(result);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f023 0301 	bic.w	r3, r3, #1
 80064da:	63bb      	str	r3, [r7, #56]	; 0x38
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3314      	adds	r3, #20
 80064e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064e4:	623a      	str	r2, [r7, #32]
 80064e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e8:	69f9      	ldr	r1, [r7, #28]
 80064ea:	6a3a      	ldr	r2, [r7, #32]
 80064ec:	e841 2300 	strex	r3, r2, [r1]
 80064f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e5      	bne.n	80064c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2220      	movs	r2, #32
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2200      	movs	r2, #0
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006510:	2303      	movs	r3, #3
 8006512:	e00f      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	429a      	cmp	r2, r3
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	461a      	mov	r2, r3
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	429a      	cmp	r2, r3
 8006530:	d09f      	beq.n	8006472 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3740      	adds	r7, #64	; 0x40
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b098      	sub	sp, #96	; 0x60
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	4613      	mov	r3, r2
 8006548:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	88fa      	ldrh	r2, [r7, #6]
 8006554:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2222      	movs	r2, #34	; 0x22
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006568:	4a40      	ldr	r2, [pc, #256]	; (800666c <UART_Start_Receive_DMA+0x130>)
 800656a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	4a3f      	ldr	r2, [pc, #252]	; (8006670 <UART_Start_Receive_DMA+0x134>)
 8006572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	4a3e      	ldr	r2, [pc, #248]	; (8006674 <UART_Start_Receive_DMA+0x138>)
 800657a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	2200      	movs	r2, #0
 8006582:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006584:	f107 0308 	add.w	r3, r7, #8
 8006588:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	88fb      	ldrh	r3, [r7, #6]
 800659c:	f7fd f8b2 	bl	8003704 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	613b      	str	r3, [r7, #16]
 80065b4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d019      	beq.n	80065fa <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	330c      	adds	r3, #12
 80065cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065d0:	e853 3f00 	ldrex	r3, [r3]
 80065d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	330c      	adds	r3, #12
 80065e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065e6:	64fa      	str	r2, [r7, #76]	; 0x4c
 80065e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ea:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80065ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065ee:	e841 2300 	strex	r3, r2, [r1]
 80065f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80065f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1e5      	bne.n	80065c6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	3314      	adds	r3, #20
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006604:	e853 3f00 	ldrex	r3, [r3]
 8006608:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	657b      	str	r3, [r7, #84]	; 0x54
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	3314      	adds	r3, #20
 8006618:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800661a:	63ba      	str	r2, [r7, #56]	; 0x38
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006620:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006622:	e841 2300 	strex	r3, r2, [r1]
 8006626:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1e5      	bne.n	80065fa <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3314      	adds	r3, #20
 8006634:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	617b      	str	r3, [r7, #20]
   return(result);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006644:	653b      	str	r3, [r7, #80]	; 0x50
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3314      	adds	r3, #20
 800664c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800664e:	627a      	str	r2, [r7, #36]	; 0x24
 8006650:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006652:	6a39      	ldr	r1, [r7, #32]
 8006654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	61fb      	str	r3, [r7, #28]
   return(result);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1e5      	bne.n	800662e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3760      	adds	r7, #96	; 0x60
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	08006271 	.word	0x08006271
 8006670:	08006397 	.word	0x08006397
 8006674:	080063cd 	.word	0x080063cd

08006678 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	330c      	adds	r3, #12
 8006686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	e853 3f00 	ldrex	r3, [r3]
 800668e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	330c      	adds	r3, #12
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	61ba      	str	r2, [r7, #24]
 80066a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	e841 2300 	strex	r3, r2, [r1]
 80066ac:	613b      	str	r3, [r7, #16]
   return(result);
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1e5      	bne.n	8006680 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80066bc:	bf00      	nop
 80066be:	3724      	adds	r7, #36	; 0x24
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr

080066c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b095      	sub	sp, #84	; 0x54
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	330c      	adds	r3, #12
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066da:	e853 3f00 	ldrex	r3, [r3]
 80066de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	330c      	adds	r3, #12
 80066ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066f0:	643a      	str	r2, [r7, #64]	; 0x40
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066f8:	e841 2300 	strex	r3, r2, [r1]
 80066fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1e5      	bne.n	80066d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	3314      	adds	r3, #20
 800670a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	e853 3f00 	ldrex	r3, [r3]
 8006712:	61fb      	str	r3, [r7, #28]
   return(result);
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	f023 0301 	bic.w	r3, r3, #1
 800671a:	64bb      	str	r3, [r7, #72]	; 0x48
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006724:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800672a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800672c:	e841 2300 	strex	r3, r2, [r1]
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1e5      	bne.n	8006704 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673c:	2b01      	cmp	r3, #1
 800673e:	d119      	bne.n	8006774 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	330c      	adds	r3, #12
 8006746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	e853 3f00 	ldrex	r3, [r3]
 800674e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f023 0310 	bic.w	r3, r3, #16
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006760:	61ba      	str	r2, [r7, #24]
 8006762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006764:	6979      	ldr	r1, [r7, #20]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	e841 2300 	strex	r3, r2, [r1]
 800676c:	613b      	str	r3, [r7, #16]
   return(result);
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e5      	bne.n	8006740 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2220      	movs	r2, #32
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006782:	bf00      	nop
 8006784:	3754      	adds	r7, #84	; 0x54
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr

0800678e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7ff fd4b 	bl	8006244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80067b6:	b480      	push	{r7}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	2b21      	cmp	r3, #33	; 0x21
 80067c8:	d13e      	bne.n	8006848 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d2:	d114      	bne.n	80067fe <UART_Transmit_IT+0x48>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d110      	bne.n	80067fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	1c9a      	adds	r2, r3, #2
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	621a      	str	r2, [r3, #32]
 80067fc:	e008      	b.n	8006810 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	1c59      	adds	r1, r3, #1
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6211      	str	r1, [r2, #32]
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006814:	b29b      	uxth	r3, r3
 8006816:	3b01      	subs	r3, #1
 8006818:	b29b      	uxth	r3, r3
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4619      	mov	r1, r3
 800681e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10f      	bne.n	8006844 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006832:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68da      	ldr	r2, [r3, #12]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006842:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	e000      	b.n	800684a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006848:	2302      	movs	r3, #2
  }
}
 800684a:	4618      	mov	r0, r3
 800684c:	3714      	adds	r7, #20
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68da      	ldr	r2, [r3, #12]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800686c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fa fdfc 	bl	8001474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b08c      	sub	sp, #48	; 0x30
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b22      	cmp	r3, #34	; 0x22
 8006898:	f040 80ab 	bne.w	80069f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068a4:	d117      	bne.n	80068d6 <UART_Receive_IT+0x50>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d113      	bne.n	80068d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	1c9a      	adds	r2, r3, #2
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	629a      	str	r2, [r3, #40]	; 0x28
 80068d4:	e026      	b.n	8006924 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80068dc:	2300      	movs	r3, #0
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068e8:	d007      	beq.n	80068fa <UART_Receive_IT+0x74>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10a      	bne.n	8006908 <UART_Receive_IT+0x82>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d106      	bne.n	8006908 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e008      	b.n	800691a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006914:	b2da      	uxtb	r2, r3
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29b      	uxth	r3, r3
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	4619      	mov	r1, r3
 8006932:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006934:	2b00      	cmp	r3, #0
 8006936:	d15a      	bne.n	80069ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0220 	bic.w	r2, r2, #32
 8006946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68da      	ldr	r2, [r3, #12]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006956:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695a      	ldr	r2, [r3, #20]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0201 	bic.w	r2, r2, #1
 8006966:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2220      	movs	r2, #32
 800696c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006974:	2b01      	cmp	r3, #1
 8006976:	d135      	bne.n	80069e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	e853 3f00 	ldrex	r3, [r3]
 800698c:	613b      	str	r3, [r7, #16]
   return(result);
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f023 0310 	bic.w	r3, r3, #16
 8006994:	627b      	str	r3, [r7, #36]	; 0x24
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	330c      	adds	r3, #12
 800699c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800699e:	623a      	str	r2, [r7, #32]
 80069a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a2:	69f9      	ldr	r1, [r7, #28]
 80069a4:	6a3a      	ldr	r2, [r7, #32]
 80069a6:	e841 2300 	strex	r3, r2, [r1]
 80069aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1e5      	bne.n	800697e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0310 	and.w	r3, r3, #16
 80069bc:	2b10      	cmp	r3, #16
 80069be:	d10a      	bne.n	80069d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069da:	4619      	mov	r1, r3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f7ff fc3b 	bl	8006258 <HAL_UARTEx_RxEventCallback>
 80069e2:	e002      	b.n	80069ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fa fd67 	bl	80014b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80069ea:	2300      	movs	r3, #0
 80069ec:	e002      	b.n	80069f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80069ee:	2300      	movs	r3, #0
 80069f0:	e000      	b.n	80069f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80069f2:	2302      	movs	r3, #2
  }
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3730      	adds	r7, #48	; 0x30
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a00:	b0c0      	sub	sp, #256	; 0x100
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a18:	68d9      	ldr	r1, [r3, #12]
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	ea40 0301 	orr.w	r3, r0, r1
 8006a24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a2a:	689a      	ldr	r2, [r3, #8]
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	431a      	orrs	r2, r3
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006a54:	f021 010c 	bic.w	r1, r1, #12
 8006a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006a62:	430b      	orrs	r3, r1
 8006a64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a76:	6999      	ldr	r1, [r3, #24]
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	ea40 0301 	orr.w	r3, r0, r1
 8006a82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	4b8f      	ldr	r3, [pc, #572]	; (8006cc8 <UART_SetConfig+0x2cc>)
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d005      	beq.n	8006a9c <UART_SetConfig+0xa0>
 8006a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	4b8d      	ldr	r3, [pc, #564]	; (8006ccc <UART_SetConfig+0x2d0>)
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	d104      	bne.n	8006aa6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a9c:	f7fd ffc0 	bl	8004a20 <HAL_RCC_GetPCLK2Freq>
 8006aa0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006aa4:	e003      	b.n	8006aae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aa6:	f7fd ffa7 	bl	80049f8 <HAL_RCC_GetPCLK1Freq>
 8006aaa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ab8:	f040 810c 	bne.w	8006cd4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006abc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006ac6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006aca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006ace:	4622      	mov	r2, r4
 8006ad0:	462b      	mov	r3, r5
 8006ad2:	1891      	adds	r1, r2, r2
 8006ad4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ad6:	415b      	adcs	r3, r3
 8006ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ada:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006ade:	4621      	mov	r1, r4
 8006ae0:	eb12 0801 	adds.w	r8, r2, r1
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	eb43 0901 	adc.w	r9, r3, r1
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006af6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006afa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006afe:	4690      	mov	r8, r2
 8006b00:	4699      	mov	r9, r3
 8006b02:	4623      	mov	r3, r4
 8006b04:	eb18 0303 	adds.w	r3, r8, r3
 8006b08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006b0c:	462b      	mov	r3, r5
 8006b0e:	eb49 0303 	adc.w	r3, r9, r3
 8006b12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b22:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006b26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	18db      	adds	r3, r3, r3
 8006b2e:	653b      	str	r3, [r7, #80]	; 0x50
 8006b30:	4613      	mov	r3, r2
 8006b32:	eb42 0303 	adc.w	r3, r2, r3
 8006b36:	657b      	str	r3, [r7, #84]	; 0x54
 8006b38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006b3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006b40:	f7f9 ffe0 	bl	8000b04 <__aeabi_uldivmod>
 8006b44:	4602      	mov	r2, r0
 8006b46:	460b      	mov	r3, r1
 8006b48:	4b61      	ldr	r3, [pc, #388]	; (8006cd0 <UART_SetConfig+0x2d4>)
 8006b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b4e:	095b      	lsrs	r3, r3, #5
 8006b50:	011c      	lsls	r4, r3, #4
 8006b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b56:	2200      	movs	r2, #0
 8006b58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006b5c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006b60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006b64:	4642      	mov	r2, r8
 8006b66:	464b      	mov	r3, r9
 8006b68:	1891      	adds	r1, r2, r2
 8006b6a:	64b9      	str	r1, [r7, #72]	; 0x48
 8006b6c:	415b      	adcs	r3, r3
 8006b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006b74:	4641      	mov	r1, r8
 8006b76:	eb12 0a01 	adds.w	sl, r2, r1
 8006b7a:	4649      	mov	r1, r9
 8006b7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006b80:	f04f 0200 	mov.w	r2, #0
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b94:	4692      	mov	sl, r2
 8006b96:	469b      	mov	fp, r3
 8006b98:	4643      	mov	r3, r8
 8006b9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006b9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ba8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006bbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	18db      	adds	r3, r3, r3
 8006bc4:	643b      	str	r3, [r7, #64]	; 0x40
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	eb42 0303 	adc.w	r3, r2, r3
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006bd6:	f7f9 ff95 	bl	8000b04 <__aeabi_uldivmod>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4611      	mov	r1, r2
 8006be0:	4b3b      	ldr	r3, [pc, #236]	; (8006cd0 <UART_SetConfig+0x2d4>)
 8006be2:	fba3 2301 	umull	r2, r3, r3, r1
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	2264      	movs	r2, #100	; 0x64
 8006bea:	fb02 f303 	mul.w	r3, r2, r3
 8006bee:	1acb      	subs	r3, r1, r3
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006bf6:	4b36      	ldr	r3, [pc, #216]	; (8006cd0 <UART_SetConfig+0x2d4>)
 8006bf8:	fba3 2302 	umull	r2, r3, r3, r2
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006c04:	441c      	add	r4, r3
 8006c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006c10:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006c14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006c18:	4642      	mov	r2, r8
 8006c1a:	464b      	mov	r3, r9
 8006c1c:	1891      	adds	r1, r2, r2
 8006c1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006c20:	415b      	adcs	r3, r3
 8006c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006c28:	4641      	mov	r1, r8
 8006c2a:	1851      	adds	r1, r2, r1
 8006c2c:	6339      	str	r1, [r7, #48]	; 0x30
 8006c2e:	4649      	mov	r1, r9
 8006c30:	414b      	adcs	r3, r1
 8006c32:	637b      	str	r3, [r7, #52]	; 0x34
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006c40:	4659      	mov	r1, fp
 8006c42:	00cb      	lsls	r3, r1, #3
 8006c44:	4651      	mov	r1, sl
 8006c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c4a:	4651      	mov	r1, sl
 8006c4c:	00ca      	lsls	r2, r1, #3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4619      	mov	r1, r3
 8006c52:	4603      	mov	r3, r0
 8006c54:	4642      	mov	r2, r8
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	460a      	mov	r2, r1
 8006c60:	eb42 0303 	adc.w	r3, r2, r3
 8006c64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006c74:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c7c:	460b      	mov	r3, r1
 8006c7e:	18db      	adds	r3, r3, r3
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c82:	4613      	mov	r3, r2
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c92:	f7f9 ff37 	bl	8000b04 <__aeabi_uldivmod>
 8006c96:	4602      	mov	r2, r0
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4b0d      	ldr	r3, [pc, #52]	; (8006cd0 <UART_SetConfig+0x2d4>)
 8006c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ca0:	095b      	lsrs	r3, r3, #5
 8006ca2:	2164      	movs	r1, #100	; 0x64
 8006ca4:	fb01 f303 	mul.w	r3, r1, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	3332      	adds	r3, #50	; 0x32
 8006cae:	4a08      	ldr	r2, [pc, #32]	; (8006cd0 <UART_SetConfig+0x2d4>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	f003 0207 	and.w	r2, r3, #7
 8006cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4422      	add	r2, r4
 8006cc2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cc4:	e106      	b.n	8006ed4 <UART_SetConfig+0x4d8>
 8006cc6:	bf00      	nop
 8006cc8:	40011000 	.word	0x40011000
 8006ccc:	40011400 	.word	0x40011400
 8006cd0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006cde:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ce2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006ce6:	4642      	mov	r2, r8
 8006ce8:	464b      	mov	r3, r9
 8006cea:	1891      	adds	r1, r2, r2
 8006cec:	6239      	str	r1, [r7, #32]
 8006cee:	415b      	adcs	r3, r3
 8006cf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006cf6:	4641      	mov	r1, r8
 8006cf8:	1854      	adds	r4, r2, r1
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	eb43 0501 	adc.w	r5, r3, r1
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	00eb      	lsls	r3, r5, #3
 8006d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d0e:	00e2      	lsls	r2, r4, #3
 8006d10:	4614      	mov	r4, r2
 8006d12:	461d      	mov	r5, r3
 8006d14:	4643      	mov	r3, r8
 8006d16:	18e3      	adds	r3, r4, r3
 8006d18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	eb45 0303 	adc.w	r3, r5, r3
 8006d22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006d32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006d42:	4629      	mov	r1, r5
 8006d44:	008b      	lsls	r3, r1, #2
 8006d46:	4621      	mov	r1, r4
 8006d48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	008a      	lsls	r2, r1, #2
 8006d50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006d54:	f7f9 fed6 	bl	8000b04 <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4b60      	ldr	r3, [pc, #384]	; (8006ee0 <UART_SetConfig+0x4e4>)
 8006d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	011c      	lsls	r4, r3, #4
 8006d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d70:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006d74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	1891      	adds	r1, r2, r2
 8006d7e:	61b9      	str	r1, [r7, #24]
 8006d80:	415b      	adcs	r3, r3
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d88:	4641      	mov	r1, r8
 8006d8a:	1851      	adds	r1, r2, r1
 8006d8c:	6139      	str	r1, [r7, #16]
 8006d8e:	4649      	mov	r1, r9
 8006d90:	414b      	adcs	r3, r1
 8006d92:	617b      	str	r3, [r7, #20]
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	f04f 0300 	mov.w	r3, #0
 8006d9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006da0:	4659      	mov	r1, fp
 8006da2:	00cb      	lsls	r3, r1, #3
 8006da4:	4651      	mov	r1, sl
 8006da6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006daa:	4651      	mov	r1, sl
 8006dac:	00ca      	lsls	r2, r1, #3
 8006dae:	4610      	mov	r0, r2
 8006db0:	4619      	mov	r1, r3
 8006db2:	4603      	mov	r3, r0
 8006db4:	4642      	mov	r2, r8
 8006db6:	189b      	adds	r3, r3, r2
 8006db8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dbc:	464b      	mov	r3, r9
 8006dbe:	460a      	mov	r2, r1
 8006dc0:	eb42 0303 	adc.w	r3, r2, r3
 8006dc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dd2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006dd4:	f04f 0200 	mov.w	r2, #0
 8006dd8:	f04f 0300 	mov.w	r3, #0
 8006ddc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006de0:	4649      	mov	r1, r9
 8006de2:	008b      	lsls	r3, r1, #2
 8006de4:	4641      	mov	r1, r8
 8006de6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dea:	4641      	mov	r1, r8
 8006dec:	008a      	lsls	r2, r1, #2
 8006dee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006df2:	f7f9 fe87 	bl	8000b04 <__aeabi_uldivmod>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4611      	mov	r1, r2
 8006dfc:	4b38      	ldr	r3, [pc, #224]	; (8006ee0 <UART_SetConfig+0x4e4>)
 8006dfe:	fba3 2301 	umull	r2, r3, r3, r1
 8006e02:	095b      	lsrs	r3, r3, #5
 8006e04:	2264      	movs	r2, #100	; 0x64
 8006e06:	fb02 f303 	mul.w	r3, r2, r3
 8006e0a:	1acb      	subs	r3, r1, r3
 8006e0c:	011b      	lsls	r3, r3, #4
 8006e0e:	3332      	adds	r3, #50	; 0x32
 8006e10:	4a33      	ldr	r2, [pc, #204]	; (8006ee0 <UART_SetConfig+0x4e4>)
 8006e12:	fba2 2303 	umull	r2, r3, r2, r3
 8006e16:	095b      	lsrs	r3, r3, #5
 8006e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e1c:	441c      	add	r4, r3
 8006e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e22:	2200      	movs	r2, #0
 8006e24:	673b      	str	r3, [r7, #112]	; 0x70
 8006e26:	677a      	str	r2, [r7, #116]	; 0x74
 8006e28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	1891      	adds	r1, r2, r2
 8006e32:	60b9      	str	r1, [r7, #8]
 8006e34:	415b      	adcs	r3, r3
 8006e36:	60fb      	str	r3, [r7, #12]
 8006e38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e3c:	4641      	mov	r1, r8
 8006e3e:	1851      	adds	r1, r2, r1
 8006e40:	6039      	str	r1, [r7, #0]
 8006e42:	4649      	mov	r1, r9
 8006e44:	414b      	adcs	r3, r1
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	f04f 0200 	mov.w	r2, #0
 8006e4c:	f04f 0300 	mov.w	r3, #0
 8006e50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e54:	4659      	mov	r1, fp
 8006e56:	00cb      	lsls	r3, r1, #3
 8006e58:	4651      	mov	r1, sl
 8006e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e5e:	4651      	mov	r1, sl
 8006e60:	00ca      	lsls	r2, r1, #3
 8006e62:	4610      	mov	r0, r2
 8006e64:	4619      	mov	r1, r3
 8006e66:	4603      	mov	r3, r0
 8006e68:	4642      	mov	r2, r8
 8006e6a:	189b      	adds	r3, r3, r2
 8006e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e6e:	464b      	mov	r3, r9
 8006e70:	460a      	mov	r2, r1
 8006e72:	eb42 0303 	adc.w	r3, r2, r3
 8006e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	663b      	str	r3, [r7, #96]	; 0x60
 8006e82:	667a      	str	r2, [r7, #100]	; 0x64
 8006e84:	f04f 0200 	mov.w	r2, #0
 8006e88:	f04f 0300 	mov.w	r3, #0
 8006e8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e90:	4649      	mov	r1, r9
 8006e92:	008b      	lsls	r3, r1, #2
 8006e94:	4641      	mov	r1, r8
 8006e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e9a:	4641      	mov	r1, r8
 8006e9c:	008a      	lsls	r2, r1, #2
 8006e9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006ea2:	f7f9 fe2f 	bl	8000b04 <__aeabi_uldivmod>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <UART_SetConfig+0x4e4>)
 8006eac:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb0:	095b      	lsrs	r3, r3, #5
 8006eb2:	2164      	movs	r1, #100	; 0x64
 8006eb4:	fb01 f303 	mul.w	r3, r1, r3
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	011b      	lsls	r3, r3, #4
 8006ebc:	3332      	adds	r3, #50	; 0x32
 8006ebe:	4a08      	ldr	r2, [pc, #32]	; (8006ee0 <UART_SetConfig+0x4e4>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f003 020f 	and.w	r2, r3, #15
 8006eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4422      	add	r2, r4
 8006ed2:	609a      	str	r2, [r3, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006eda:	46bd      	mov	sp, r7
 8006edc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee0:	51eb851f 	.word	0x51eb851f

08006ee4 <memset>:
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <__libc_init_array>:
 8006ef4:	b570      	push	{r4, r5, r6, lr}
 8006ef6:	4d0d      	ldr	r5, [pc, #52]	; (8006f2c <__libc_init_array+0x38>)
 8006ef8:	4c0d      	ldr	r4, [pc, #52]	; (8006f30 <__libc_init_array+0x3c>)
 8006efa:	1b64      	subs	r4, r4, r5
 8006efc:	10a4      	asrs	r4, r4, #2
 8006efe:	2600      	movs	r6, #0
 8006f00:	42a6      	cmp	r6, r4
 8006f02:	d109      	bne.n	8006f18 <__libc_init_array+0x24>
 8006f04:	4d0b      	ldr	r5, [pc, #44]	; (8006f34 <__libc_init_array+0x40>)
 8006f06:	4c0c      	ldr	r4, [pc, #48]	; (8006f38 <__libc_init_array+0x44>)
 8006f08:	f000 f818 	bl	8006f3c <_init>
 8006f0c:	1b64      	subs	r4, r4, r5
 8006f0e:	10a4      	asrs	r4, r4, #2
 8006f10:	2600      	movs	r6, #0
 8006f12:	42a6      	cmp	r6, r4
 8006f14:	d105      	bne.n	8006f22 <__libc_init_array+0x2e>
 8006f16:	bd70      	pop	{r4, r5, r6, pc}
 8006f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1c:	4798      	blx	r3
 8006f1e:	3601      	adds	r6, #1
 8006f20:	e7ee      	b.n	8006f00 <__libc_init_array+0xc>
 8006f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f26:	4798      	blx	r3
 8006f28:	3601      	adds	r6, #1
 8006f2a:	e7f2      	b.n	8006f12 <__libc_init_array+0x1e>
 8006f2c:	08006f7c 	.word	0x08006f7c
 8006f30:	08006f7c 	.word	0x08006f7c
 8006f34:	08006f7c 	.word	0x08006f7c
 8006f38:	08006f80 	.word	0x08006f80

08006f3c <_init>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr

08006f48 <_fini>:
 8006f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f4a:	bf00      	nop
 8006f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4e:	bc08      	pop	{r3}
 8006f50:	469e      	mov	lr, r3
 8006f52:	4770      	bx	lr
